[{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.— Rob Pike1 Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Italics Bold Code     italics bold code    Code Blocks Code block with backticks \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Fruit  Apple Orange Banana   Dairy  Milk Cheese      The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n  ","permalink":"http://localhost:1313/posts/markdown-syntax-guide/","summary":"\u003cp\u003eThis article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\u003c/p\u003e","title":"Markdown Syntax Guide"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site configuration and then you can type emoji shorthand codes directly in content files.\nThese begin and end with a colon and include the code of an emoji:\nGone camping! {?:}tent: Be back soon. That is so funny! {?:}joy: The rendered output looks like this:\nGone camping! :tent: Be back soon.\nThat is so funny! :joy:\nThe following cheat sheet is a useful reference for emoji shorthand codes.\nSmileys \u0026amp; Emotion Face Smiling    icon code icon code     :grinning: grinning :smiley: smiley   :smile: smile :grin: grin   :laughing: laughing satisfied :sweat_smile: sweat_smile   :rofl: rofl :joy: joy   :slightly_smiling_face: slightly_smiling_face :upside_down_face: upside_down_face   :wink: wink :blush: blush   :innocent: innocent      Face Affection    icon code icon code     :heart_eyes: heart_eyes :kissing_heart: kissing_heart   :kissing: kissing :relaxed: relaxed   :kissing_closed_eyes: kissing_closed_eyes :kissing_smiling_eyes: kissing_smiling_eyes    Face Tongue    icon code icon code     :yum: yum :stuck_out_tongue: stuck_out_tongue   :stuck_out_tongue_winking_eye: stuck_out_tongue_winking_eye :stuck_out_tongue_closed_eyes: stuck_out_tongue_closed_eyes   :money_mouth_face: money_mouth_face      Face Hand    icon code icon code     :hugs: hugs :thinking: thinking    Face Neutral Skeptical    icon code icon code     :zipper_mouth_face: zipper_mouth_face :neutral_face: neutral_face   :expressionless: expressionless :no_mouth: no_mouth   :smirk: smirk :unamused: unamused   :roll_eyes: roll_eyes :grimacing: grimacing   :lying_face: lying_face      Face Sleepy    icon code icon code     :relieved: relieved :pensive: pensive   :sleepy: sleepy :drooling_face: drooling_face   :sleeping: sleeping      Face Unwell    icon code icon code     :mask: mask :face_with_thermometer: face_with_thermometer   :face_with_head_bandage: face_with_head_bandage :nauseated_face: nauseated_face   :sneezing_face: sneezing_face :dizzy_face: dizzy_face    Face Hat    icon code icon code     :cowboy_hat_face: cowboy_hat_face      Face Glasses    icon code icon code     :sunglasses: sunglasses :nerd_face: nerd_face    Face Concerned    icon code icon code     :confused: confused :worried: worried   :slightly_frowning_face: slightly_frowning_face :frowning_face: frowning_face   :open_mouth: open_mouth :hushed: hushed   :astonished: astonished :flushed: flushed   :frowning: frowning :anguished: anguished   :fearful: fearful :cold_sweat: cold_sweat   :disappointed_relieved: disappointed_relieved :cry: cry   :sob: sob :scream: scream   :confounded: confounded :persevere: persevere   :disappointed: disappointed :sweat: sweat   :weary: weary :tired_face: tired_face    Face Negative    icon code icon code     :triumph: triumph :pout: pout rage   :angry: angry :smiling_imp: smiling_imp   :imp: imp :skull: skull   :skull_and_crossbones: skull_and_crossbones      Face Costume    icon code icon code     :hankey: hankey poop shit :clown_face: clown_face   :japanese_ogre: japanese_ogre :japanese_goblin: japanese_goblin   :ghost: ghost :alien: alien   :space_invader: space_invader :robot: robot    Cat Face    icon code icon code     :smiley_cat: smiley_cat :smile_cat: smile_cat   :joy_cat: joy_cat :heart_eyes_cat: heart_eyes_cat   :smirk_cat: smirk_cat :kissing_cat: kissing_cat   :scream_cat: scream_cat :crying_cat_face: crying_cat_face   :pouting_cat: pouting_cat      Monkey Face    icon code icon code     :see_no_evil: see_no_evil :hear_no_evil: hear_no_evil   :speak_no_evil: speak_no_evil      Emotion    icon code icon code     :kiss: kiss :love_letter: love_letter   :cupid: cupid :gift_heart: gift_heart   :sparkling_heart: sparkling_heart :heartpulse: heartpulse   :heartbeat: heartbeat :revolving_hearts: revolving_hearts   :two_hearts: two_hearts :heart_decoration: heart_decoration   :heavy_heart_exclamation: heavy_heart_exclamation :broken_heart: broken_heart   :heart: heart :yellow_heart: yellow_heart   :green_heart: green_heart :blue_heart: blue_heart   :purple_heart: purple_heart :black_heart: black_heart   :100: 100 :anger: anger   :boom: boom collision :dizzy: dizzy   :sweat_drops: sweat_drops :dash: dash   :hole: hole :bomb: bomb   :speech_balloon: speech_balloon :eye_speech_bubble: eye_speech_bubble   :right_anger_bubble: right_anger_bubble :thought_balloon: thought_balloon   :zzz: zzz      People \u0026amp; Body Hand Fingers Open    icon code icon code     :wave: wave :raised_back_of_hand: raised_back_of_hand   :raised_hand_with_fingers_splayed: raised_hand_with_fingers_splayed :hand: hand raised_hand   :vulcan_salute: vulcan_salute      Hand Fingers Partial    icon code icon code     :ok_hand: ok_hand :v: v   :crossed_fingers: crossed_fingers :metal: metal   :call_me_hand: call_me_hand      Hand Single Finger    icon code icon code     :point_left: point_left :point_right: point_right   :point_up_2: point_up_2 :fu: fu middle_finger   :point_down: point_down :point_up: point_up    Hand Fingers Closed    icon code icon code     :+1: +1 thumbsup :-1: -1 thumbsdown   :fist: fist fist_raised :facepunch: facepunch fist_oncoming punch   :fist_left: fist_left :fist_right: fist_right    Hands    icon code icon code     :clap: clap :raised_hands: raised_hands   :open_hands: open_hands :handshake: handshake   :pray: pray      Hand Prop    icon code icon code     :writing_hand: writing_hand :nail_care: nail_care   :selfie: selfie      Body Parts    icon code icon code     :muscle: muscle :ear: ear   :nose: nose :eyes: eyes   :eye: eye :tongue: tongue   :lips: lips      Person    icon code icon code     :baby: baby :boy: boy   :girl: girl :blonde_man: blonde_man person_with_blond_hair   :man: man :woman: woman   :blonde_woman: blonde_woman :older_man: older_man   :older_woman: older_woman      Person Gesture    icon code icon code     :frowning_woman: frowning_woman person_frowning :frowning_man: frowning_man   :person_with_pouting_face: person_with_pouting_face pouting_woman :pouting_man: pouting_man   :ng_woman: ng_woman no_good no_good_woman :ng_man: ng_man no_good_man   :ok_woman: ok_woman :ok_man: ok_man   :information_desk_person: information_desk_person sassy_woman tipping_hand_woman :sassy_man: sassy_man tipping_hand_man   :raising_hand: raising_hand raising_hand_woman :raising_hand_man: raising_hand_man   :bow: bow bowing_man :bowing_woman: bowing_woman   :man_facepalming: man_facepalming :woman_facepalming: woman_facepalming   :man_shrugging: man_shrugging :woman_shrugging: woman_shrugging    Person Role    icon code icon code     :man_health_worker: man_health_worker :woman_health_worker: woman_health_worker   :man_student: man_student :woman_student: woman_student   :man_teacher: man_teacher :woman_teacher: woman_teacher   :man_judge: man_judge :woman_judge: woman_judge   :man_farmer: man_farmer :woman_farmer: woman_farmer   :man_cook: man_cook :woman_cook: woman_cook   :man_mechanic: man_mechanic :woman_mechanic: woman_mechanic   :man_factory_worker: man_factory_worker :woman_factory_worker: woman_factory_worker   :man_office_worker: man_office_worker :woman_office_worker: woman_office_worker   :man_scientist: man_scientist :woman_scientist: woman_scientist   :man_technologist: man_technologist :woman_technologist: woman_technologist   :man_singer: man_singer :woman_singer: woman_singer   :man_artist: man_artist :woman_artist: woman_artist   :man_pilot: man_pilot :woman_pilot: woman_pilot   :man_astronaut: man_astronaut :woman_astronaut: woman_astronaut   :man_firefighter: man_firefighter :woman_firefighter: woman_firefighter   :cop: cop policeman :policewoman: policewoman   :detective: detective male_detective :female_detective: female_detective   :guardsman: guardsman :guardswoman: guardswoman   :construction_worker: construction_worker construction_worker_man :construction_worker_woman: construction_worker_woman   :prince: prince :princess: princess   :man_with_turban: man_with_turban :woman_with_turban: woman_with_turban   :man_with_gua_pi_mao: man_with_gua_pi_mao :man_in_tuxedo: man_in_tuxedo   :bride_with_veil: bride_with_veil :pregnant_woman: pregnant_woman    Person Fantasy    icon code icon code     :angel: angel :santa: santa   :mrs_claus: mrs_claus      Person Activity    icon code icon code     :massage: massage massage_woman :massage_man: massage_man   :haircut: haircut haircut_woman :haircut_man: haircut_man   :walking: walking walking_man :walking_woman: walking_woman   :runner: runner running running_man :running_woman: running_woman   :dancer: dancer :man_dancing: man_dancing   :business_suit_levitating: business_suit_levitating :dancers: dancers dancing_women   :dancing_men: dancing_men      Person Sport    icon code icon code     :person_fencing: person_fencing :horse_racing: horse_racing   :skier: skier :snowboarder: snowboarder   :golfing_man: golfing_man :golfing_woman: golfing_woman   :surfer: surfer surfing_man :surfing_woman: surfing_woman   :rowboat: rowboat rowing_man :rowing_woman: rowing_woman   :swimmer: swimmer swimming_man :swimming_woman: swimming_woman   :basketball_man: basketball_man :basketball_woman: basketball_woman   :weight_lifting_man: weight_lifting_man :weight_lifting_woman: weight_lifting_woman   :bicyclist: bicyclist biking_man :biking_woman: biking_woman   :mountain_bicyclist: mountain_bicyclist mountain_biking_man :mountain_biking_woman: mountain_biking_woman   :man_cartwheeling: man_cartwheeling :woman_cartwheeling: woman_cartwheeling   :men_wrestling: men_wrestling :women_wrestling: women_wrestling   :man_playing_water_polo: man_playing_water_polo :woman_playing_water_polo: woman_playing_water_polo   :man_playing_handball: man_playing_handball :woman_playing_handball: woman_playing_handball   :man_juggling: man_juggling :woman_juggling: woman_juggling    Person Resting    icon code icon code     :bath: bath :sleeping_bed: sleeping_bed    Family    icon code icon code     :two_women_holding_hands: two_women_holding_hands :couple: couple   :two_men_holding_hands: two_men_holding_hands :couplekiss_man_woman: couplekiss_man_woman   :couplekiss_man_man: couplekiss_man_man :couplekiss_woman_woman: couplekiss_woman_woman   :couple_with_heart: couple_with_heart couple_with_heart_woman_man :couple_with_heart_man_man: couple_with_heart_man_man   :couple_with_heart_woman_woman: couple_with_heart_woman_woman :family: family family_man_woman_boy   :family_man_woman_girl: family_man_woman_girl :family_man_woman_girl_boy: family_man_woman_girl_boy   :family_man_woman_boy_boy: family_man_woman_boy_boy :family_man_woman_girl_girl: family_man_woman_girl_girl   :family_man_man_boy: family_man_man_boy :family_man_man_girl: family_man_man_girl   :family_man_man_girl_boy: family_man_man_girl_boy :family_man_man_boy_boy: family_man_man_boy_boy   :family_man_man_girl_girl: family_man_man_girl_girl :family_woman_woman_boy: family_woman_woman_boy   :family_woman_woman_girl: family_woman_woman_girl :family_woman_woman_girl_boy: family_woman_woman_girl_boy   :family_woman_woman_boy_boy: family_woman_woman_boy_boy :family_woman_woman_girl_girl: family_woman_woman_girl_girl   :family_man_boy: family_man_boy :family_man_boy_boy: family_man_boy_boy   :family_man_girl: family_man_girl :family_man_girl_boy: family_man_girl_boy   :family_man_girl_girl: family_man_girl_girl :family_woman_boy: family_woman_boy   :family_woman_boy_boy: family_woman_boy_boy :family_woman_girl: family_woman_girl   :family_woman_girl_boy: family_woman_girl_boy :family_woman_girl_girl: family_woman_girl_girl    Person Symbol    icon code icon code     :speaking_head: speaking_head :bust_in_silhouette: bust_in_silhouette   :busts_in_silhouette: busts_in_silhouette :footprints: footprints    Animals \u0026amp; Nature Animal Mammal    icon code icon code     :monkey_face: monkey_face :monkey: monkey   :gorilla: gorilla :dog: dog   :dog2: dog2 :poodle: poodle   :wolf: wolf :fox_face: fox_face   :cat: cat :cat2: cat2   :lion: lion :tiger: tiger   :tiger2: tiger2 :leopard: leopard   :horse: horse :racehorse: racehorse   :unicorn: unicorn :deer: deer   :cow: cow :ox: ox   :water_buffalo: water_buffalo :cow2: cow2   :pig: pig :pig2: pig2   :boar: boar :pig_nose: pig_nose   :ram: ram :sheep: sheep   :goat: goat :dromedary_camel: dromedary_camel   :camel: camel :elephant: elephant   :rhinoceros: rhinoceros :mouse: mouse   :mouse2: mouse2 :rat: rat   :hamster: hamster :rabbit: rabbit   :rabbit2: rabbit2 :chipmunk: chipmunk   :bat: bat :bear: bear   :koala: koala :panda_face: panda_face   :feet: feet paw_prints      Animal Bird    icon code icon code     :turkey: turkey :chicken: chicken   :rooster: rooster :hatching_chick: hatching_chick   :baby_chick: baby_chick :hatched_chick: hatched_chick   :bird: bird :penguin: penguin   :dove: dove :eagle: eagle   :duck: duck :owl: owl    Animal Amphibian    icon code icon code     :frog: frog      Animal Reptile    icon code icon code     :crocodile: crocodile :turtle: turtle   :lizard: lizard :snake: snake   :dragon_face: dragon_face :dragon: dragon    Animal Marine    icon code icon code     :whale: whale :whale2: whale2   :dolphin: dolphin flipper :fish: fish   :tropical_fish: tropical_fish :blowfish: blowfish   :shark: shark :octopus: octopus   :shell: shell      Animal Bug    icon code icon code     :snail: snail :butterfly: butterfly   :bug: bug :ant: ant   :bee: bee honeybee :beetle: beetle   :spider: spider :spider_web: spider_web   :scorpion: scorpion      Plant Flower    icon code icon code     :bouquet: bouquet :cherry_blossom: cherry_blossom   :white_flower: white_flower :rosette: rosette   :rose: rose :wilted_flower: wilted_flower   :hibiscus: hibiscus :sunflower: sunflower   :blossom: blossom :tulip: tulip    Plant Other    icon code icon code     :seedling: seedling :evergreen_tree: evergreen_tree   :deciduous_tree: deciduous_tree :palm_tree: palm_tree   :cactus: cactus :ear_of_rice: ear_of_rice   :herb: herb :shamrock: shamrock   :four_leaf_clover: four_leaf_clover :maple_leaf: maple_leaf   :fallen_leaf: fallen_leaf :leaves: leaves    Food \u0026amp; Drink Food Fruit    icon code icon code     :grapes: grapes :melon: melon   :watermelon: watermelon :mandarin: mandarin orange tangerine   :lemon: lemon :banana: banana   :pineapple: pineapple :apple: apple   :green_apple: green_apple :pear: pear   :peach: peach :cherries: cherries   :strawberry: strawberry :kiwi_fruit: kiwi_fruit   :tomato: tomato      Food Vegetable    icon code icon code     :avocado: avocado :eggplant: eggplant   :potato: potato :carrot: carrot   :corn: corn :hot_pepper: hot_pepper   :cucumber: cucumber :mushroom: mushroom   :peanuts: peanuts :chestnut: chestnut    Food Prepared    icon code icon code     :bread: bread :croissant: croissant   :baguette_bread: baguette_bread :pancakes: pancakes   :cheese: cheese :meat_on_bone: meat_on_bone   :poultry_leg: poultry_leg :bacon: bacon   :hamburger: hamburger :fries: fries   :pizza: pizza :hotdog: hotdog   :taco: taco :burrito: burrito   :stuffed_flatbread: stuffed_flatbread :egg: egg   :fried_egg: fried_egg :shallow_pan_of_food: shallow_pan_of_food   :stew: stew :green_salad: green_salad   :popcorn: popcorn      Food Asian    icon code icon code     :bento: bento :rice_cracker: rice_cracker   :rice_ball: rice_ball :rice: rice   :curry: curry :ramen: ramen   :spaghetti: spaghetti :sweet_potato: sweet_potato   :oden: oden :sushi: sushi   :fried_shrimp: fried_shrimp :fish_cake: fish_cake   :dango: dango      Food Marine    icon code icon code     :crab: crab :shrimp: shrimp   :squid: squid      Food Sweet    icon code icon code     :icecream: icecream :shaved_ice: shaved_ice   :ice_cream: ice_cream :doughnut: doughnut   :cookie: cookie :birthday: birthday   :cake: cake :chocolate_bar: chocolate_bar   :candy: candy :lollipop: lollipop   :custard: custard :honey_pot: honey_pot    Drink    icon code icon code     :baby_bottle: baby_bottle :milk_glass: milk_glass   :coffee: coffee :tea: tea   :sake: sake :champagne: champagne   :wine_glass: wine_glass :cocktail: cocktail   :tropical_drink: tropical_drink :beer: beer   :beers: beers :clinking_glasses: clinking_glasses   :tumbler_glass: tumbler_glass      Dishware    icon code icon code     :plate_with_cutlery: plate_with_cutlery :fork_and_knife: fork_and_knife   :spoon: spoon :hocho: hocho knife   :amphora: amphora      Travel \u0026amp; Places Place Map    icon code icon code     :earth_africa: earth_africa :earth_americas: earth_americas   :earth_asia: earth_asia :globe_with_meridians: globe_with_meridians   :world_map: world_map :japan: japan    Place Geographic    icon code icon code     :mountain_snow: mountain_snow :mountain: mountain   :volcano: volcano :mount_fuji: mount_fuji   :camping: camping :beach_umbrella: beach_umbrella   :desert: desert :desert_island: desert_island   :national_park: national_park      Place Building    icon code icon code     :stadium: stadium :classical_building: classical_building   :building_construction: building_construction :houses: houses   :derelict_house: derelict_house :house: house   :house_with_garden: house_with_garden :office: office   :post_office: post_office :european_post_office: european_post_office   :hospital: hospital :bank: bank   :hotel: hotel :love_hotel: love_hotel   :convenience_store: convenience_store :school: school   :department_store: department_store :factory: factory   :japanese_castle: japanese_castle :european_castle: european_castle   :wedding: wedding :tokyo_tower: tokyo_tower   :statue_of_liberty: statue_of_liberty      Place Religious    icon code icon code     :church: church :mosque: mosque   :synagogue: synagogue :shinto_shrine: shinto_shrine   :kaaba: kaaba      Place Other    icon code icon code     :fountain: fountain :tent: tent   :foggy: foggy :night_with_stars: night_with_stars   :cityscape: cityscape :sunrise_over_mountains: sunrise_over_mountains   :sunrise: sunrise :city_sunset: city_sunset   :city_sunrise: city_sunrise :bridge_at_night: bridge_at_night   :hotsprings: hotsprings :carousel_horse: carousel_horse   :ferris_wheel: ferris_wheel :roller_coaster: roller_coaster   :barber: barber :circus_tent: circus_tent    Transport Ground    icon code icon code     :steam_locomotive: steam_locomotive :railway_car: railway_car   :bullettrain_side: bullettrain_side :bullettrain_front: bullettrain_front   :train2: train2 :metro: metro   :light_rail: light_rail :station: station   :tram: tram :monorail: monorail   :mountain_railway: mountain_railway :train: train   :bus: bus :oncoming_bus: oncoming_bus   :trolleybus: trolleybus :minibus: minibus   :ambulance: ambulance :fire_engine: fire_engine   :police_car: police_car :oncoming_police_car: oncoming_police_car   :taxi: taxi :oncoming_taxi: oncoming_taxi   :car: car red_car :oncoming_automobile: oncoming_automobile   :blue_car: blue_car :truck: truck   :articulated_lorry: articulated_lorry :tractor: tractor   :racing_car: racing_car :motorcycle: motorcycle   :motor_scooter: motor_scooter :bike: bike   :kick_scooter: kick_scooter :busstop: busstop   :motorway: motorway :railway_track: railway_track   :oil_drum: oil_drum :fuelpump: fuelpump   :rotating_light: rotating_light :traffic_light: traffic_light   :vertical_traffic_light: vertical_traffic_light :stop_sign: stop_sign   :construction: construction      Transport Water    icon code icon code     :anchor: anchor :boat: boat sailboat   :canoe: canoe :speedboat: speedboat   :passenger_ship: passenger_ship :ferry: ferry   :motor_boat: motor_boat :ship: ship    Transport Air    icon code icon code     :airplane: airplane :small_airplane: small_airplane   :flight_departure: flight_departure :flight_arrival: flight_arrival   :seat: seat :helicopter: helicopter   :suspension_railway: suspension_railway :mountain_cableway: mountain_cableway   :aerial_tramway: aerial_tramway :artificial_satellite: artificial_satellite   :rocket: rocket      Hotel    icon code icon code     :bellhop_bell: bellhop_bell      Time    icon code icon code     :hourglass: hourglass :hourglass_flowing_sand: hourglass_flowing_sand   :watch: watch :alarm_clock: alarm_clock   :stopwatch: stopwatch :timer_clock: timer_clock   :mantelpiece_clock: mantelpiece_clock :clock12: clock12   :clock1230: clock1230 :clock1: clock1   :clock130: clock130 :clock2: clock2   :clock230: clock230 :clock3: clock3   :clock330: clock330 :clock4: clock4   :clock430: clock430 :clock5: clock5   :clock530: clock530 :clock6: clock6   :clock630: clock630 :clock7: clock7   :clock730: clock730 :clock8: clock8   :clock830: clock830 :clock9: clock9   :clock930: clock930 :clock10: clock10   :clock1030: clock1030 :clock11: clock11   :clock1130: clock1130      Sky \u0026amp; Weather    icon code icon code     :new_moon: new_moon :waxing_crescent_moon: waxing_crescent_moon   :first_quarter_moon: first_quarter_moon :moon: moon waxing_gibbous_moon   :full_moon: full_moon :waning_gibbous_moon: waning_gibbous_moon   :last_quarter_moon: last_quarter_moon :waning_crescent_moon: waning_crescent_moon   :crescent_moon: crescent_moon :new_moon_with_face: new_moon_with_face   :first_quarter_moon_with_face: first_quarter_moon_with_face :last_quarter_moon_with_face: last_quarter_moon_with_face   :thermometer: thermometer :sunny: sunny   :full_moon_with_face: full_moon_with_face :sun_with_face: sun_with_face   :star: star :star2: star2   :stars: stars :milky_way: milky_way   :cloud: cloud :partly_sunny: partly_sunny   :cloud_with_lightning_and_rain: cloud_with_lightning_and_rain :sun_behind_small_cloud: sun_behind_small_cloud   :sun_behind_large_cloud: sun_behind_large_cloud :sun_behind_rain_cloud: sun_behind_rain_cloud   :cloud_with_rain: cloud_with_rain :cloud_with_snow: cloud_with_snow   :cloud_with_lightning: cloud_with_lightning :tornado: tornado   :fog: fog :wind_face: wind_face   :cyclone: cyclone :rainbow: rainbow   :closed_umbrella: closed_umbrella :open_umbrella: open_umbrella   :umbrella: umbrella :parasol_on_ground: parasol_on_ground   :zap: zap :snowflake: snowflake   :snowman_with_snow: snowman_with_snow :snowman: snowman   :comet: comet :fire: fire   :droplet: droplet :ocean: ocean    Activities Event    icon code icon code     :jack_o_lantern: jack_o_lantern :christmas_tree: christmas_tree   :fireworks: fireworks :sparkler: sparkler   :sparkles: sparkles :balloon: balloon   :tada: tada :confetti_ball: confetti_ball   :tanabata_tree: tanabata_tree :bamboo: bamboo   :dolls: dolls :flags: flags   :wind_chime: wind_chime :rice_scene: rice_scene   :ribbon: ribbon :gift: gift   :reminder_ribbon: reminder_ribbon :tickets: tickets   :ticket: ticket      Award Medal    icon code icon code     :medal_military: medal_military :trophy: trophy   :medal_sports: medal_sports :1st_place_medal: 1st_place_medal   :2nd_place_medal: 2nd_place_medal :3rd_place_medal: 3rd_place_medal    Sport    icon code icon code     :soccer: soccer :baseball: baseball   :basketball: basketball :volleyball: volleyball   :football: football :rugby_football: rugby_football   :tennis: tennis :bowling: bowling   :cricket: cricket :field_hockey: field_hockey   :ice_hockey: ice_hockey :ping_pong: ping_pong   :badminton: badminton :boxing_glove: boxing_glove   :martial_arts_uniform: martial_arts_uniform :goal_net: goal_net   :golf: golf :ice_skate: ice_skate   :fishing_pole_and_fish: fishing_pole_and_fish :running_shirt_with_sash: running_shirt_with_sash   :ski: ski      Game    icon code icon code     :dart: dart :8ball: 8ball   :crystal_ball: crystal_ball :video_game: video_game   :joystick: joystick :slot_machine: slot_machine   :game_die: game_die :spades: spades   :hearts: hearts :diamonds: diamonds   :clubs: clubs :black_joker: black_joker   :mahjong: mahjong :flower_playing_cards: flower_playing_cards    Arts \u0026amp; Crafts    icon code icon code     :performing_arts: performing_arts :framed_picture: framed_picture   :art: art      Objects Clothing    icon code icon code     :eyeglasses: eyeglasses :dark_sunglasses: dark_sunglasses   :necktie: necktie :shirt: shirt tshirt   :jeans: jeans :dress: dress   :kimono: kimono :bikini: bikini   :womans_clothes: womans_clothes :purse: purse   :handbag: handbag :pouch: pouch   :shopping: shopping :school_satchel: school_satchel   :mans_shoe: mans_shoe shoe :athletic_shoe: athletic_shoe   :high_heel: high_heel :sandal: sandal   :boot: boot :crown: crown   :womans_hat: womans_hat :tophat: tophat   :mortar_board: mortar_board :rescue_worker_helmet: rescue_worker_helmet   :prayer_beads: prayer_beads :lipstick: lipstick   :ring: ring :gem: gem    Sound    icon code icon code     :mute: mute :speaker: speaker   :sound: sound :loud_sound: loud_sound   :loudspeaker: loudspeaker :mega: mega   :postal_horn: postal_horn :bell: bell   :no_bell: no_bell      Music    icon code icon code     :musical_score: musical_score :musical_note: musical_note   :notes: notes :studio_microphone: studio_microphone   :level_slider: level_slider :control_knobs: control_knobs   :microphone: microphone :headphones: headphones   :radio: radio      Musical Instrument    icon code icon code     :saxophone: saxophone :guitar: guitar   :musical_keyboard: musical_keyboard :trumpet: trumpet   :violin: violin :drum: drum    Phone    icon code icon code     :iphone: iphone :calling: calling   :phone: phone telephone :telephone_receiver: telephone_receiver   :pager: pager :fax: fax    Computer    icon code icon code     :battery: battery :electric_plug: electric_plug   :computer: computer :desktop_computer: desktop_computer   :printer: printer :keyboard: keyboard   :computer_mouse: computer_mouse :trackball: trackball   :minidisc: minidisc :floppy_disk: floppy_disk   :cd: cd :dvd: dvd    Light \u0026amp; Video    icon code icon code     :movie_camera: movie_camera :film_strip: film_strip   :film_projector: film_projector :clapper: clapper   :tv: tv :camera: camera   :camera_flash: camera_flash :video_camera: video_camera   :vhs: vhs :mag: mag   :mag_right: mag_right :candle: candle   :bulb: bulb :flashlight: flashlight   :izakaya_lantern: izakaya_lantern lantern      Book Paper    icon code icon code     :notebook_with_decorative_cover: notebook_with_decorative_cover :closed_book: closed_book   :book: book open_book :green_book: green_book   :blue_book: blue_book :orange_book: orange_book   :books: books :notebook: notebook   :ledger: ledger :page_with_curl: page_with_curl   :scroll: scroll :page_facing_up: page_facing_up   :newspaper: newspaper :newspaper_roll: newspaper_roll   :bookmark_tabs: bookmark_tabs :bookmark: bookmark   :label: label      Money    icon code icon code     :moneybag: moneybag :yen: yen   :dollar: dollar :euro: euro   :pound: pound :money_with_wings: money_with_wings   :credit_card: credit_card :chart: chart    Mail    icon code icon code     :email: email envelope :e-mail: :e-mail:   :incoming_envelope: incoming_envelope :envelope_with_arrow: envelope_with_arrow   :outbox_tray: outbox_tray :inbox_tray: inbox_tray   :package: package :mailbox: mailbox   :mailbox_closed: mailbox_closed :mailbox_with_mail: mailbox_with_mail   :mailbox_with_no_mail: mailbox_with_no_mail :postbox: postbox   :ballot_box: ballot_box      Writing    icon code icon code     :pencil2: pencil2 :black_nib: black_nib   :fountain_pen: fountain_pen :pen: pen   :paintbrush: paintbrush :crayon: crayon   :memo: memo pencil      Office    icon code icon code     :briefcase: briefcase :file_folder: file_folder   :open_file_folder: open_file_folder :card_index_dividers: card_index_dividers   :date: date :calendar: calendar   :spiral_notepad: spiral_notepad :spiral_calendar: spiral_calendar   :card_index: card_index :chart_with_upwards_trend: chart_with_upwards_trend   :chart_with_downwards_trend: chart_with_downwards_trend :bar_chart: bar_chart   :clipboard: clipboard :pushpin: pushpin   :round_pushpin: round_pushpin :paperclip: paperclip   :paperclips: paperclips :straight_ruler: straight_ruler   :triangular_ruler: triangular_ruler :scissors: scissors   :card_file_box: card_file_box :file_cabinet: file_cabinet   :wastebasket: wastebasket      Lock    icon code icon code     :lock: lock :unlock: unlock   :lock_with_ink_pen: lock_with_ink_pen :closed_lock_with_key: closed_lock_with_key   :key: key :old_key: old_key    Tool    icon code icon code     :hammer: hammer :pick: pick   :hammer_and_pick: hammer_and_pick :hammer_and_wrench: hammer_and_wrench   :dagger: dagger :crossed_swords: crossed_swords   :gun: gun :bow_and_arrow: bow_and_arrow   :shield: shield :wrench: wrench   :nut_and_bolt: nut_and_bolt :gear: gear   :clamp: clamp :balance_scale: balance_scale   :link: link :chains: chains    Science    icon code icon code     :alembic: alembic :microscope: microscope   :telescope: telescope :satellite: satellite    Medical    icon code icon code     :syringe: syringe :pill: pill    Household    icon code icon code     :door: door :bed: bed   :couch_and_lamp: couch_and_lamp :toilet: toilet   :shower: shower :bathtub: bathtub   :shopping_cart: shopping_cart      Other Object    icon code icon code     :smoking: smoking :coffin: coffin   :funeral_urn: funeral_urn :moyai: moyai    Symbols Transport Sign    icon code icon code     :atm: atm :put_litter_in_its_place: put_litter_in_its_place   :potable_water: potable_water :wheelchair: wheelchair   :mens: mens :womens: womens   :restroom: restroom :baby_symbol: baby_symbol   :wc: wc :passport_control: passport_control   :customs: customs :baggage_claim: baggage_claim   :left_luggage: left_luggage      Warning    icon code icon code     :warning: warning :children_crossing: children_crossing   :no_entry: no_entry :no_entry_sign: no_entry_sign   :no_bicycles: no_bicycles :no_smoking: no_smoking   :do_not_litter: do_not_litter :non-potable_water: :non-potable_water:   :no_pedestrians: no_pedestrians :no_mobile_phones: no_mobile_phones   :underage: underage :radioactive: radioactive   :biohazard: biohazard      Arrow    icon code icon code     :arrow_up: arrow_up :arrow_upper_right: arrow_upper_right   :arrow_right: arrow_right :arrow_lower_right: arrow_lower_right   :arrow_down: arrow_down :arrow_lower_left: arrow_lower_left   :arrow_left: arrow_left :arrow_upper_left: arrow_upper_left   :arrow_up_down: arrow_up_down :left_right_arrow: left_right_arrow   :leftwards_arrow_with_hook: leftwards_arrow_with_hook :arrow_right_hook: arrow_right_hook   :arrow_heading_up: arrow_heading_up :arrow_heading_down: arrow_heading_down   :arrows_clockwise: arrows_clockwise :arrows_counterclockwise: arrows_counterclockwise   :back: back :end: end   :on: on :soon: soon   :top: top      Religion    icon code icon code     :place_of_worship: place_of_worship :atom_symbol: atom_symbol   :om: om :star_of_david: star_of_david   :wheel_of_dharma: wheel_of_dharma :yin_yang: yin_yang   :latin_cross: latin_cross :orthodox_cross: orthodox_cross   :star_and_crescent: star_and_crescent :peace_symbol: peace_symbol   :menorah: menorah :six_pointed_star: six_pointed_star    Zodiac    icon code icon code     :aries: aries :taurus: taurus   :gemini: gemini :cancer: cancer   :leo: leo :virgo: virgo   :libra: libra :scorpius: scorpius   :sagittarius: sagittarius :capricorn: capricorn   :aquarius: aquarius :pisces: pisces   :ophiuchus: ophiuchus      Av Symbol    icon code icon code     :twisted_rightwards_arrows: twisted_rightwards_arrows :repeat: repeat   :repeat_one: repeat_one :arrow_forward: arrow_forward   :fast_forward: fast_forward :next_track_button: next_track_button   :play_or_pause_button: play_or_pause_button :arrow_backward: arrow_backward   :rewind: rewind :previous_track_button: previous_track_button   :arrow_up_small: arrow_up_small :arrow_double_up: arrow_double_up   :arrow_down_small: arrow_down_small :arrow_double_down: arrow_double_down   :pause_button: pause_button :stop_button: stop_button   :record_button: record_button :cinema: cinema   :low_brightness: low_brightness :high_brightness: high_brightness   :signal_strength: signal_strength :vibration_mode: vibration_mode   :mobile_phone_off: mobile_phone_off      Math    icon code icon code     :heavy_multiplication_x: heavy_multiplication_x :heavy_plus_sign: heavy_plus_sign   :heavy_minus_sign: heavy_minus_sign :heavy_division_sign: heavy_division_sign    Punctuation    icon code icon code     :bangbang: bangbang :interrobang: interrobang   :question: question :grey_question: grey_question   :grey_exclamation: grey_exclamation :exclamation: exclamation heavy_exclamation_mark   :wavy_dash: wavy_dash      Currency    icon code icon code     :currency_exchange: currency_exchange :heavy_dollar_sign: heavy_dollar_sign    Keycap    icon code icon code     :hash: hash :asterisk: asterisk   :zero: zero :one: one   :two: two :three: three   :four: four :five: five   :six: six :seven: seven   :eight: eight :nine: nine   :keycap_ten: keycap_ten      Alphabet    icon code icon code     :capital_abcd: capital_abcd :abcd: abcd   :1234: 1234 :symbols: symbols   :abc: abc :a: a   :ab: ab :b: b   :cl: cl :cool: cool   :free: free :information_source: information_source   :id: id :m: m   :new: new :ng: ng   :o2: o2 :ok: ok   :parking: parking :sos: sos   :up: up :vs: vs   :koko: koko :sa: sa   :u6708: u6708 :u6709: u6709   :u6307: u6307 :ideograph_advantage: ideograph_advantage   :u5272: u5272 :u7121: u7121   :u7981: u7981 :accept: accept   :u7533: u7533 :u5408: u5408   :u7a7a: u7a7a :congratulations: congratulations   :secret: secret :u55b6: u55b6   :u6e80: u6e80      Geometric    icon code icon code     :red_circle: red_circle :large_blue_circle: large_blue_circle   :black_circle: black_circle :white_circle: white_circle   :black_large_square: black_large_square :white_large_square: white_large_square   :black_medium_square: black_medium_square :white_medium_square: white_medium_square   :black_medium_small_square: black_medium_small_square :white_medium_small_square: white_medium_small_square   :black_small_square: black_small_square :white_small_square: white_small_square   :large_orange_diamond: large_orange_diamond :large_blue_diamond: large_blue_diamond   :small_orange_diamond: small_orange_diamond :small_blue_diamond: small_blue_diamond   :small_red_triangle: small_red_triangle :small_red_triangle_down: small_red_triangle_down   :diamond_shape_with_a_dot_inside: diamond_shape_with_a_dot_inside :radio_button: radio_button   :white_square_button: white_square_button :black_square_button: black_square_button    Other Symbol    icon code icon code     :recycle: recycle :fleur_de_lis: fleur_de_lis   :trident: trident :name_badge: name_badge   :beginner: beginner :o: o   :white_check_mark: white_check_mark :ballot_box_with_check: ballot_box_with_check   :heavy_check_mark: heavy_check_mark :x: x   :negative_squared_cross_mark: negative_squared_cross_mark :curly_loop: curly_loop   :loop: loop :part_alternation_mark: part_alternation_mark   :eight_spoked_asterisk: eight_spoked_asterisk :eight_pointed_black_star: eight_pointed_black_star   :sparkle: sparkle :copyright: copyright   :registered: registered :tm: tm    Flags Common Flags    icon code icon code     :checkered_flag: checkered_flag :triangular_flag_on_post: triangular_flag_on_post   :crossed_flags: crossed_flags :black_flag: black_flag   :white_flag: white_flag :rainbow_flag: rainbow_flag    Country and Region Flags    icon code icon code     :andorra: andorra :united_arab_emirates: united_arab_emirates   :afghanistan: afghanistan :antigua_barbuda: antigua_barbuda   :anguilla: anguilla :albania: albania   :armenia: armenia :angola: angola   :antarctica: antarctica :argentina: argentina   :american_samoa: american_samoa :austria: austria   :australia: australia :aruba: aruba   :aland_islands: aland_islands :azerbaijan: azerbaijan   :bosnia_herzegovina: bosnia_herzegovina :barbados: barbados   :bangladesh: bangladesh :belgium: belgium   :burkina_faso: burkina_faso :bulgaria: bulgaria   :bahrain: bahrain :burundi: burundi   :benin: benin :st_barthelemy: st_barthelemy   :bermuda: bermuda :brunei: brunei   :bolivia: bolivia :caribbean_netherlands: caribbean_netherlands   :brazil: brazil :bahamas: bahamas   :bhutan: bhutan :botswana: botswana   :belarus: belarus :belize: belize   :canada: canada :cocos_islands: cocos_islands   :congo_kinshasa: congo_kinshasa :central_african_republic: central_african_republic   :congo_brazzaville: congo_brazzaville :switzerland: switzerland   :cote_divoire: cote_divoire :cook_islands: cook_islands   :chile: chile :cameroon: cameroon   :cn: cn :colombia: colombia   :costa_rica: costa_rica :cuba: cuba   :cape_verde: cape_verde :curacao: curacao   :christmas_island: christmas_island :cyprus: cyprus   :czech_republic: czech_republic :de: de   :djibouti: djibouti :denmark: denmark   :dominica: dominica :dominican_republic: dominican_republic   :algeria: algeria :ecuador: ecuador   :estonia: estonia :egypt: egypt   :western_sahara: western_sahara :eritrea: eritrea   :es: es :ethiopia: ethiopia   :eu: eu european_union :finland: finland   :fiji: fiji :falkland_islands: falkland_islands   :micronesia: micronesia :faroe_islands: faroe_islands   :fr: fr :gabon: gabon   :gb: gb uk :grenada: grenada   :georgia: georgia :french_guiana: french_guiana   :guernsey: guernsey :ghana: ghana   :gibraltar: gibraltar :greenland: greenland   :gambia: gambia :guinea: guinea   :guadeloupe: guadeloupe :equatorial_guinea: equatorial_guinea   :greece: greece :south_georgia_south_sandwich_islands: south_georgia_south_sandwich_islands   :guatemala: guatemala :guam: guam   :guinea_bissau: guinea_bissau :guyana: guyana   :hong_kong: hong_kong :honduras: honduras   :croatia: croatia :haiti: haiti   :hungary: hungary :canary_islands: canary_islands   :indonesia: indonesia :ireland: ireland   :israel: israel :isle_of_man: isle_of_man   :india: india :british_indian_ocean_territory: british_indian_ocean_territory   :iraq: iraq :iran: iran   :iceland: iceland :it: it   :jersey: jersey :jamaica: jamaica   :jordan: jordan :jp: jp   :kenya: kenya :kyrgyzstan: kyrgyzstan   :cambodia: cambodia :kiribati: kiribati   :comoros: comoros :st_kitts_nevis: st_kitts_nevis   :north_korea: north_korea :kr: kr   :kuwait: kuwait :cayman_islands: cayman_islands   :kazakhstan: kazakhstan :laos: laos   :lebanon: lebanon :st_lucia: st_lucia   :liechtenstein: liechtenstein :sri_lanka: sri_lanka   :liberia: liberia :lesotho: lesotho   :lithuania: lithuania :luxembourg: luxembourg   :latvia: latvia :libya: libya   :morocco: morocco :monaco: monaco   :moldova: moldova :montenegro: montenegro   :madagascar: madagascar :marshall_islands: marshall_islands   :macedonia: macedonia :mali: mali   :myanmar: myanmar :mongolia: mongolia   :macau: macau :northern_mariana_islands: northern_mariana_islands   :martinique: martinique :mauritania: mauritania   :montserrat: montserrat :malta: malta   :mauritius: mauritius :maldives: maldives   :malawi: malawi :mexico: mexico   :malaysia: malaysia :mozambique: mozambique   :namibia: namibia :new_caledonia: new_caledonia   :niger: niger :norfolk_island: norfolk_island   :nigeria: nigeria :nicaragua: nicaragua   :netherlands: netherlands :norway: norway   :nepal: nepal :nauru: nauru   :niue: niue :new_zealand: new_zealand   :oman: oman :panama: panama   :peru: peru :french_polynesia: french_polynesia   :papua_new_guinea: papua_new_guinea :philippines: philippines   :pakistan: pakistan :poland: poland   :st_pierre_miquelon: st_pierre_miquelon :pitcairn_islands: pitcairn_islands   :puerto_rico: puerto_rico :palestinian_territories: palestinian_territories   :portugal: portugal :palau: palau   :paraguay: paraguay :qatar: qatar   :reunion: reunion :romania: romania   :serbia: serbia :ru: ru   :rwanda: rwanda :saudi_arabia: saudi_arabia   :solomon_islands: solomon_islands :seychelles: seychelles   :sudan: sudan :sweden: sweden   :singapore: singapore :st_helena: st_helena   :slovenia: slovenia :slovakia: slovakia   :sierra_leone: sierra_leone :san_marino: san_marino   :senegal: senegal :somalia: somalia   :suriname: suriname :south_sudan: south_sudan   :sao_tome_principe: sao_tome_principe :el_salvador: el_salvador   :sint_maarten: sint_maarten :syria: syria   :swaziland: swaziland :turks_caicos_islands: turks_caicos_islands   :chad: chad :french_southern_territories: french_southern_territories   :togo: togo :thailand: thailand   :tajikistan: tajikistan :tokelau: tokelau   :timor_leste: timor_leste :turkmenistan: turkmenistan   :tunisia: tunisia :tonga: tonga   :tr: tr :trinidad_tobago: trinidad_tobago   :tuvalu: tuvalu :taiwan: taiwan   :tanzania: tanzania :ukraine: ukraine   :uganda: uganda :us: us   :uruguay: uruguay :uzbekistan: uzbekistan   :vatican_city: vatican_city :st_vincent_grenadines: st_vincent_grenadines   :venezuela: venezuela :british_virgin_islands: british_virgin_islands   :us_virgin_islands: us_virgin_islands :vietnam: vietnam   :vanuatu: vanuatu :wallis_futuna: wallis_futuna   :samoa: samoa :kosovo: kosovo   :yemen: yemen :mayotte: mayotte   :south_africa: south_africa :zambia: zambia   :zimbabwe: zimbabwe      ","permalink":"http://localhost:1313/posts/emoji-support/","summary":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site configuration and then you can type emoji shorthand codes directly in content files.\nThese begin and end with a colon and include the code of an emoji:\nGone camping! {?:}tent: Be back soon. That is so funny!","title":"Emoji Support"},{"content":"Photo by John Cafazza on Unsplash\nAt Parallax, we depend on many external services. Some of these services are things that we use internally for development like LaunchDarkly or GitHub. Others are services that our customers depend on for their business like HubSpot.\n Did you know many SaaS providers have webpages dedicated to publishing current status of their service(s)? If you’re an engineer, I’m sure you’ve stumbled on to a status page or two trying to figure out why something wasn’t working.\nAt Parallax, we were tired of having to look for a status page when we thought something might be wrong. We wanted to be able to be proactive. We wanted to be able to have alerts come to us. As opposed to tracking down alerts after we heard something might be wrong.\nIn order to solve this problem, I was preparing to build an app. It would be a fun little side project. As luck would have it, I didn’t need to. I discovered we could get most of what we wanted by using Slack and a single slash command!\nStatus Pages Before we dive into the nuts and bolts, let’s first start with what is a status page?\nI mentioned in the introduction that many SaaS providers publish status pages.\nGitHub Status\nhttps://www.githubstatus.com/\nLaunchDarkly Status\nhttps://status.launchdarkly.com/\nHubSpot Status\nhttps://status.hubspot.com/\nStatus pages follow a similar format. They show current status of major features of their service(s). Some will have another page for incident history or even history of individual components.\nFinding a status page, if one exists, is as easy as searching by the provider name and the keyword status.\nSlack and Slash Commands Slack is an über popular messaging app. We use it internally at Parallax, and I use it personally with several other groups I’m involved with.\nSlack also provides a feature called slash commands. What are slash commands? Slack describes them this way:\n Slash Commands allow users to invoke your app by typing a string into the message composer box.\n A slash command can be something fun like \\giphy alrighty then, which is used to find and post an image from the internet related to the words _“alrighty then” (_you can imagine what we’re looking for here). Or this could be something more serious like \\hangout, which will create a new Google Hangout and post the meeting link wherever the command was originally run.\nSlack has many built in slash commands available right out of the box, for free.\nPhoto by Solaiman Hossen on Unsplash\nConnect Slack To Status Pages Now that we’ve covered the basics, let’s get down to the business of how this actually works. What I’m about to cover is what we’ve done at Parallax. This is simply an approach that has worked for us. Your mileage may vary.\nCreate a New Channel First we need to create a new channel. We are going to need a place to house alerts from our providers, a new channel is a great place to put them all.\nThis keeps them in one place and allows for better notification management. Because it’s a channel it means others can join if they want to. It also means you can tag people that should know when something happens.\nFind a Status Feed — GitHub GitHub is a great first example of a status feed. Their status page provides a lot of things you will see on other status pages; a way to subscribe to status updates.\nYou can subscribe to updates via several different means vehicles. However, what we are after is the RSS feed.\ngithubstatus.com — history.rss\nAs you can see above, we end up with a url to an RSS feed for githubstatus.com: https://www.githubstatus.com/history.rss.\nFind a Status Feed — HubSpot Most status pages are going to look like the GitHub status page. They will usually have a way to subscribe to updates and RSS is typically one of the options.\nThere are some status pages that have an RSS feed available, but you have to search around a bit to find it. HubSpot is a great example of this. HubSpot has a wonderful status page. Subscribing to a feed, though, isn’t exactly obvious.\nIf you navigate to the HubSpot status page you won’t see any options for subscribing, even if you click Past Incidents. You’ll see a history of events, but again no subscribe option.\nDid you notice the url? /history. What happens if you add .rss at the end of that url?\nhttps://status.hubspot.com/history.rss\nBingo!\nYou will find status pages that have a history page, typically also publish that url as RSS feed that you can get to by adding .rss.\nAdd The Feed To Slack This is where the magic happens.\nRemember how we talked about Slack slash commands? We’re going to use one now. In order to follow along, you will need a status page RSS url and Slack.\nFirst, navigate to your new channel in Slack.\nThen, in the message bar at the bottom, type.\n/feed subscribe RSS_FEED_URL where RSS_FEED_URL is the status feed you wish to subscribe to.\nUse slack to subscribe to RSS status page feeds\nThats all there is to it!\nYou have now subscribed to an RSS feed. Slack will automatically poll for new updates on that feed. And, depending on your notifications settings, will trigger a new message popup when a new event is triggered on any of the feeds you’re subscribed to.\nPretty cool, huh?\nAt any point you can list the feeds you have subscribed to via the /feed list command\nlist of status rss feed subscriptions using slack `/feed list`\nCool Trick, Why Should I Care? This does a few things for us, some of which I’ve mentioned already. This gives us a built-in way to manage status of multiple external integrations. We get to leverage Slack’s notification system and built-in subscription system for free to do the work of checking RSS feeds for updates. When there is an issue of note, we have an easy place to thread messages and built in links (from the RSS feed) to more information.\nI’ll give you an example. Remember the Great Facebook Outage from October of 2021? Well, we started seeing things popping up and that put us on high alert.\nConclusion Consolidating status feeds to a single Slack channel, and letting Slack do all the hard work has made it easier for us to be proactive instead of reactive. Issue warnings come to us and we no longer have to track them down.\n References  https://www.getparallax.com/ https://launchdarkly.com/ https://www.hubspot.com/ https://github.com/ https://slack.com/ https://api.slack.com/interactivity/slash-commands https://www.githubstatus.com/ https://status.launchdarkly.com/ https://status.hubspot.com/ https://hangouts.google.com/ https://slack.com/help/articles/201259356-Slash-commands-in-Slack https://slack.com/help/articles/201402297-Create-a-channel https://engineering.fb.com/2021/10/04/networking-traffic/outage/  ","permalink":"http://localhost:1313/posts/have-slack-tell-you-when-external-services-hiccup/","summary":"Photo by John Cafazza on Unsplash\nAt Parallax, we depend on many external services. Some of these services are things that we use internally for development like LaunchDarkly or GitHub. Others are services that our customers depend on for their business like HubSpot.\n Did you know many SaaS providers have webpages dedicated to publishing current status of their service(s)? If you’re an engineer, I’m sure you’ve stumbled on to a status page or two trying to figure out why something wasn’t working.","title":"Have Slack Tell You When External Services Hiccup"},{"content":"Photo by Andrew Neel on Unsplash\nDo you find yourself tinkering with something new? Do you find yourself working on some cool new idea in your free time?\nYeah, me too.\nDo you keep track of what you want to work on next? You are keeping track of the work, right?\n Over the years I have worked on many personal projects. I’m a builder and I like to build things. I also have two young children. So when I have some time to work on my projects, I don’t want to spend time remembering what the heck I wanted to work on. I want to jump right in and get working right away.\nWrite It Down! Someone told me once:\n Ideas come and go. Write down your ideas and remove the need to remember them.\n Writing things down makes it much easier to focus on the work. When you start, you don’t have to spend time remembering what to work on. It’s so much easier to finish work when you know what that work actually is.\nI have found success when I run my personal projects more like a Project Manager. Where I take time to write out bits of work, setup segments of work (sprints, if you will 😉), and estimate that work. This way I am able to do the work more efficiently. Not only that, I have a place to practice estimation, scoping, delivery and other things I do during my day job.\nPhoto by Elizaveta Dushechkina on Unsplash\nWhere Do I Start? I will start by saying I don’t do all this for every project. Sometimes it doesn’t make sense. I’m working on something small, I’m messing around, or it’s a thing that I know won’t live long, etc.\nHowever, for the more involved projects, these are the things I do to keep it running smoothly.\n Version Control  Put your project in version control!\n I start every project the same way: I use Git. This was a habit I really started to practice after going through The Ruby On Rails Tutorial (by Michael Hartl) a couple times, back in the early 2010’s. I was still pretty new to git, so it was good practice to continue doing it.\nYou should always practice good habits, even with personal projects. We use version control in our work, we should use it in our own projects too. This has the added benefit of proving a sandbox to play in. It’s way less risky to play with git on a personal project.\nThis doesn’t mean I always push to a remote. It does mean each project I’m working on is ready to be pushed to a remote if I decide to do that at some point in the future.\nRemote Repository  Create a remote git repository\n This could be with any number of the available Git providers: Github, Gitlab, Azure Repos, etc.\nI usually go with Github or Gitlab, but the choice here isn’t so much about git. The choice here is about other features available like issues, projects, CI/CD options, registries, etc.\nIssues  Use issues management to keep track of tasks\n Most remote git services like Github or Gitlab support some form of issue management. This is extremely useful for popular projects because it provides a place for users to call out bugs or request new features.\nGitHub Issues\nGitlab Issues\nFor your own projects, you can use these too! It’s a great way to organize work. You start this phase by writing things down. Thats it, you don’t need to add labels or effort or anything like that. Just write it down!\nYou can take this one step further by adding labels like Bug or Feature or Enhancement, etc.\nhttps://github.com/n8rzz/chess-stats/issues\nThis provides something to build on. If you’re using only titles, thats cool, you now have a todo list. If you’re using labels, even better because now you can easily group work. Most of the time I try to keep things simple. I use each issue to store links related to a topic.\nhttps://github.com/n8rzz/chess-stats/issues/30\nSometimes I use checkboxes to build a list of things to do for a single feature or bug.\nhttps://github.com/n8rzz/chess-stats/issues/26\nYour goal should be to leverage issues for information storage. Use issues to store ideas, bugs, and any pertinent information related to each item.\nWrite it down.\nOnce it is written down you no longer need to remember it.\nIssue Management  Use tools to manage groups of issues and sequence work\n If you’ve made it this far you have a remote git repository and a list of issues related to your project. These issues might be bugs, ideas for features, or enhancements, or possibly just notes. We have a new problem, though; How and when do we do all this work?\nWell, with Github you can use Github Projects.\nGithub issues — https://github.com/features/issues/\nGitlab has something similar called Boards.\nGitlab Boards — https://gitlab.com/gitlab-org/gitlab/-/boards\nBoth are excellent ways to manage larger efforts. This could be as simple creating groups of items to tackle over a long weekend, to something as complex as assigning work for a large team.\n Github and Gitlab didn’t always have Projects or Boards. So, naturally, there are open-source alternatives out there too. Personally, I’ve had great luck with one called Zube. We use Zube on OpenScope and it’s awesome!\nzube.io\nZube allows you to create higher level groupings of issues like Epics and Releases. There are a whole host of features that can help super-charge your development planning.\nAt the end of the day, all of these options are simply another layer on top of issues. As long as you create issues, you can leverage any of these options to plan tactically.\n There are two applications I have not mentioned here: Jira and Azure Devops. I wouldn’t recommend either for most personal projects. They are great systems, but both are complex and require a lot of setup. If our goal is to efficiently use our time by planning work, it makes little sense to spend that time planning how to plan. I’ll just say avoid Jira and Azure Devops for personal projects unless you know what you’re getting into.\n Conclusion Whew, you made it!\nWe talked about many different ways to manage a personal project. We start small and each step builds on the last. We establish good habits from the beginning and continue to build on them as things get more complex.\nIf you remember anything from this article I’d like it to be this:\n Establish good habits that build on the previous good habits\n This goes back to the age-old phrase: Baby Steps. As long as you’re moving in the right direction, even if it’s slowly, you’re going to improve.\n Photo by Cesar Carlevarino Aragon on Unsplash\nReferences Tools\nWe covered quite a few tools in this article. Here is a quick recap.\nRemote Git Repositories and basic Issue Tracking\n Github Gitlab  Project Management Integrations\n Zube Jira Azure Devops  Links  https://medium.com/counterarts/tinker-with-purpose-9fb4f5a52459 https://git-scm.com/ https://github.com/ https://about.gitlab.com/ https://azure.microsoft.com/en-us/services/devops/repos/ https://github.com/features/issues/ https://docs.gitlab.com/ee/user/project/issues/ https://zube.io/ https://www.openscope.co/ https://zube.io/docs/components https://www.atlassian.com/software/jira https://azure.microsoft.com/en-us/services/devops/boards/ https://medium.com/counterarts/tinker-with-purpose-9fb4f5a52459  ","permalink":"http://localhost:1313/posts/how-i-manage-my-personal-projects/","summary":"Photo by Andrew Neel on Unsplash\nDo you find yourself tinkering with something new? Do you find yourself working on some cool new idea in your free time?\nYeah, me too.\nDo you keep track of what you want to work on next? You are keeping track of the work, right?\n Over the years I have worked on many personal projects. I’m a builder and I like to build things.","title":"How I Manage My Personal Projects"},{"content":"Photo by Jasmin Sessler on Unsplash\nYou made it past the interview and you signed the offer. You’re hired! Now you have a shiny new laptop in front of you and are about to take on the world of software engineering…\nRuh-roh! Now what?\nSoftware engineering is not like other jobs, this is a whole new world.\nWhen I landed my first engineering job, I had spent the previous 10 years in manufacturing. Like, driving a forklift and planning production runs. Getting a job as a software engineer was more than a little bit of a culture shock for me. If you’re fresh out of a boot camp, or entering the software game for the first time, it may be a culture shock for you too.\n Here are some things you should expect for your first year as a software engineer, and some tips to help make for a smooth ride.\nPhoto by Ana Municio on Unsplash\nWrite Things Down Keep a notebook nearby and use it. Write down the obvious important things like tasks and questions. A notebook is great for notes and ideas. You’ll notice over time your notes get better. You may find yourself referring back to them, too.\nI wrote about my experience with notes recently. I’m quite certain that getting into the habit of writing things down allowed me to get better faster. Writing things down allowed me to focus on the important things instead of remembering the important things.\nBaby Steps  Rome wasn’t built in a day.\n  The best way to build a brick wall is one brick at a time.\n These cliché quotes are tacky but true. When you are faced with a problem that seems insurmountable, the best way to tackle it is to break it down into smaller bits.\nTask: Build a login form\nBits\n Text and Password input Input Label Hint Text Submit Buttons Form Layout Api interactions Error State(s)  When you break work down into smaller parts, it’s less scary. You’ve worked with a text input before, how about a password input? You know how to build a basic layout, code that up first and get it working with the API first. Then plug in the styles and make it look right.\nBe Honest There will come a time when you will miss a deadline. You will probably know that you will miss the deadline long beforehand. Be honest with yourself and your team and speak up early.\nWhen a project manager asks how long something will take and you think it will be 2 weeks, tell them 3 weeks. Good project managers will add a buffer to your estimate. Other project managers will try to negotiate you down to 1 week. Don’t budge. If you think it’ll be 2 weeks say 3 weeks. Nobody wins by underestimating.\nLet’s imagine you find yourself reading the specs on a component you will be building. Those specs call out “… this should resemble a Finite State Machine…” . You don’t have the slightest idea of what a Finite State Machine is. Like any good engineer, first you Google it. Then, after you’ve read about it, ask someone to explain it in english.\nYou will feel uncomfortable. It’s ok. It’s ok to be vulnerable and it’s ok to be stubborn (with estimates).\nSet Expectations This is probably one of the most important items in this post.\nProperly setting expectations can save you, your team, and possibly even your project a lot of stress.\nWhat might that look like, exactly?\nSay you are tasked with building a feature that you said would take you a week. You were smart, and added a bit of extra space in that estimate, but still, it’s going to be close. On Wednesday (halfway through your one-week estimate), the designer and project manager ask if you can change the layout of the feature you’re working on.\nThe way that I approach this is thusly:\nFirst, I ask if this shift is critical to the feature. Second, assuming it is (cause it always is), I let everybody know that this will probably change the original estimate. Instead of finishing on Friday like we planned, this new work adds another two to three days, so now it won’t be finished until next Wednesday. Third, I ask if that change is still critical given the updated timeline.\nThat’s all there is to it. If scope changes so does timeline. Be vocal about it and make sure the correct stakeholders know about it.\nAsk Questions You will hear words you’ve never heard before. You will hear about concepts you’ve never heard before. You will be expected to know what you’re doing, unless you don’t.\n It’s ok to not know\n When you don’t know something, it’s ok. First, breathe. Second, speak up and ask someone. Hopefully, because you are a new engineer, you will have a mentor, project lead, or even a project manager who can answer your questions. Be respectful of people’s time, but also don’t stay stuck on something for too long.\nIt’s way better to ask questions early and move on to the next problem than it is to sit and spin your wheels for hours on end. Don’t do that. Ask early.\nPhoto by elizabeth lies on Unsplash\nSleep On It Our job as engineers is to solve problems. We do this all day long. Our brains are like a muscle, if it works too hard for too long it begins to tire out.\nYou will find yourself stuck on a problem at the end of the day. You will think you can push through it, and in some cases, you might. There will be some that you can’t push through. You know the best way to solve those problems?\nGo home and sleep.\nNine times out of ten you will have that problem solved within the first hour of the next day.\nWorks like a charm.\nPhoto by nikko macaspac on Unsplash\nAsk For Help When I first started, I thought my job was to know how to do everything assigned to me. I frequently didn’t know and it scared the crap out of me. It took me much longer than I’d like to admit to figure out that not knowing is actually part of the job. We get paid to figure things out.\nIf you find yourself stuck on a problem for more than an hour, ask for help. Before you do that, though, try the Rubber Duck method first. When you do ask for help, first be sure you know what your problem actually is. And be sure to have tried a few things first.\nIt’s probably something silly, but it might not be. Asking someone for help usually get you past whatever it is you’re stuck on.\nThe more seasoned engineers around you have lots of experience doing this, so it will look like they know everything. They don’t, but they know more than you. They are also way better at identifying what they don’t know, so they can surgically figure it out fast. Try to learn from them by watching how they work. You’ll be amazed and some day that will be you.\nImposter Syndrome Is Real (And Normal)  Imposter syndrome, also called perceived fraudulence, involves feelings of self-doubt and personal incompetence that persist despite your education, experience, and accomplishments\n One day, you will find yourself feeling as though you don’t belong. You’ll look around and think that everyone round you is way smarter than you. You’ll wonder how on earth were you lucky enough to get here? This is called Imposter Syndrome and it is a real thing. It can be debilitating.\nYou want to know a secret? Everybody gets imposter syndrome from time to time. When you start feeling like an imposter do not be troubled, that’s normal. It feels funny, sure, but still normal.\nBurnout Burnout is like staying awake for 48 hours straight and being so tired you can’t fall asleep. When you’ve reached burnout stage with coding, you will start to make simple mistakes and may become irritable.\nIf you’re anything like me, you might eat, sleep, and drink engineering. I’m extremely lucky in that I’ve been able to turn one of my hobbies into a career. For me, that means I code at work and code at night. Too much of that, though, can lead to burnout.\nThere are more classical ways to get to burnout, too, like 100 hour weeks to meet a deadline. Don’t do that.\nBurnout is something to watch out for. Be honest with yourself about if you are starting to feel burned out. If you’re lucky, you will have teammates looking out for you. They might tell you that you’re burned out before you even realize it.\nSide note: If you do find yourself on such a team, they’re keepers. A team that looks out for each other and is honest with each other about burnout is a solid team. Hold on to that as much as you can.\nRest is the only cure for burnout. Unplug and go to bed!\nConclusion Your first year as an engineer is going to be a wild ride. Don’t panic. Your first year is going to be filled with learning, trials and tribulations. When you come out the other side, you are going to be stronger than you ever thought possible!\n References  https://nategeslin.medium.com/what-i-look-for-when-i-hire-software-engineers-febf653aa95b https://rubberduckdebugging.com/ https://letmegooglethat.com/?q=finite+state+machine https://www.healthline.com/health/mental-health/imposter-syndrome https://www.healthline.com/health/tips-for-identifying-and-preventing-burnout  ","permalink":"http://localhost:1313/posts/your-first-year-as-a-software-engineer/","summary":"Photo by Jasmin Sessler on Unsplash\nYou made it past the interview and you signed the offer. You’re hired! Now you have a shiny new laptop in front of you and are about to take on the world of software engineering…\nRuh-roh! Now what?\nSoftware engineering is not like other jobs, this is a whole new world.\nWhen I landed my first engineering job, I had spent the previous 10 years in manufacturing.","title":"Your First Year As A Software Engineer"},{"content":"Over the years, I have had the pleasure of being a part of the hiring process. My experiences range from being a cog in the wheel of hiring for a massive corporation, and a primary decision-maker for a small start-up.\nWhat makes a good hire? It might not be what you think…\n Get Noticed The first step to getting hired at any job is to get noticed. That might be as simple as submitting an application. It might also be as complex as leaving a lasting impression on the CEO you happened to run into.\n Before one can interview they must make themselves known.\n This seems painfully obvious, I know, but it is true. Some companies receive hundreds or even thousands of applications. As an example, for the last round of hiring I did, we received over 80 applications. Our company is less than 40 employees and our dev team was less than 10 at the time.\nAt this stage, you must be a little more persistent. Make phone calls, send emails, stop in and get to know the person at the front desk. In a virtual world, you could follow the company and comment on their posts. You could also find people who work at that company, and maybe even interact with their posts too! Do whatever it takes to get an interview but be friendly, respectful, and courteous. You will be more likely to leave a good impression with someone who could put in a good word for you later. You must convince them that they do actually want to spend time interviewing you.\nYou will be more likely to leave a good impression on someone who could put in a good word for you later. You must convince them that they do actually want to spend time interviewing you.\nWhat I\u0026rsquo;m looking for Your qualifications will be the first thing I look at. What if you don\u0026rsquo;t have much for qualifications? Not to worry! This can be offset by persistence or examples of past work.\nA well-curated GitHub account (or any public git repository) can be a big plus, especially if your qualifications are light. I\u0026rsquo;ll usually look at a few of the most recent repos. What am I looking for exactly?\n what have you worked on recently? how do you write code? what language(s) do you use in your projects? what tools (if any) are you using on your projects? are there any comments? are they good comments? are there any tests? how is your code structured? is there a README and is it useful?  For me, a quality public git repository account can completely offset a weak resume.\nPhone Interview Depending on the job and the company doing the hiring, there may be a phone interview first. Consider this a pre-interview and is likely to be informal and somewhat short. Again, be friendly, respectful, and courteous. The goal here is to get a feel for candidates and see what sort of an attitude they have. Phone interviews rarely go into deep detail. Instead, the focus on work history and broad concepts.\nWhat I\u0026rsquo;m Looking For Communication. How well do you communicate using only language? Where are you when doing the phone interview?\nThese days, this stage may actually be a hangout or zoom or whatever, but the questions are the same. If it is a video call, my favorite thing to do is what the eyes and face to see how you respond to questioning. I\u0026rsquo;m also keeping an eye out for, and try to be respectful of, nerves.\nIt\u0026rsquo;s okay to be nervous. You know what you should do if you\u0026rsquo;re nervous? Say that you\u0026rsquo;re nervous. For me, seeing someone nervous during an interview means that you care and that you are not a robot.\nLastly, this call serves as a control for the Interview later on. I will be able to compare your attitude between the two interviews. I\u0026rsquo;ll also be able to compare your attitude between a relaxed situation and a more stressful one (the in-person interview).\nCode Challenge Personally, I am a fan of short, concise code challenges. It doesn\u0026rsquo;t need to be complicated, just enough to prove they can code and just enough to see how they code. Something small like designing an API for a React component, or setting up a data model for some API response. One thing I absolutely avoid here and in the following interview is anything related to algorithms. They are good to know, but not required knowledge for my team. This is where the process starts looking at more than \u0026ldquo;can an engineer engineer?\u0026rdquo; An important part of this phase, and this is on the hiring side, is the feedback. If I ask a candidate to do a code challenge, at the very least they will get feedback on the work. That may be in the form of an email or it may be as part of the next stage; an in-person interview. Either way, a candidate is getting some feedback!\nWhat I\u0026rsquo;m Looking For Did you complete the challenge successfully? I look for the same things here as do with the public repos (if available). The big items I look for here are correctness, code quality, planning, and structure.\nInterview Here we tie it all together. I\u0026rsquo;ll ask about your past experience, dev-related or not. We\u0026rsquo;ll make some small talk and I\u0026rsquo;ll probably ask you a few dry theory questions. If you\u0026rsquo;ve done a code challenge, we will spend a good amount of time going over that in-depth.\nWhether the challenge was completed successfully is not as important as you might think. For me, I like to use challenges as a shared reference. You\u0026rsquo;ve had a chance to solve a small problem in a controlled environment that I am familiar with. At the interview, I can ask you questions about why you solved it the way you did. I can offer you constructive criticism on something that could be improved. I can poke at various parts of your solution to see what you know about the code you wrote. I can challenge your assumptions. I can ask about your thought processes and how you went about planning to complete the challenge. You did plan, right?\nPass or fail, your work is almost done. You\u0026rsquo;ve worked hard to get to this point, you made a lasting impression, and that is awesome!\nWhat I\u0026rsquo;m Looking For This may come as a surprise but I\u0026rsquo;m not looking for correct answers to my questions. Correct answers are awesome, don\u0026rsquo;t get me wrong, but what I\u0026rsquo;m looking for here is how you handle this poking and criticism. Are you answering confidently? If not, I\u0026rsquo;m going to dig into that to figure out what you might know and what you do not. Are you able to acknowledge when you might not know something? This is the most important part of the entire exercise. It really isn\u0026rsquo;t what you know, it\u0026rsquo;s how you handle not knowing that is important to me here.\nJust as important, can you handle feedback and maybe even constructive criticism? Are you humble or arrogant? Are you vulnerable or defensive?\nThese are all important things to know about a person who will be joining a team. You see, I\u0026rsquo;m not just figuring out what you do and do not know, I\u0026rsquo;m figuring out if you will fit in the team. Attitude and effort are huge. Frankly, you can be fresh out of a Bootcamp, have zero qualifications, fail the challenge, and yet still get the job. If you can have a good attitude, handle feedback with grace, ask great questions, admit when you don\u0026rsquo;t know something, and want to learn, I want you on my team. Software development is a team sport. People who have a good attitude and put in the effort are what make the team work well.\nI can teach people to code. I can\u0026rsquo;t teach people to not be a d***.\nFollow Up! After the interview (or interviews), no matter the outcome, follow up! Send a thank you card, send a thank you email. Add the interviewer(s) on LinkedIn, etc. Show that you have an interest in the job. Even if you don\u0026rsquo;t get the job, memorable follow-ups can leave a positive lasting impression.\n Conclusion Interviewing can be stressful. You will improve your chances by being confident, humble, honest, courteous, and kind.\nAttitude and effort can completely offset a lack of qualifications or a failed code challenge. If you\u0026rsquo;re likable, and someone who works well with others, your chances are good.\nGood luck out there!\n","permalink":"http://localhost:1313/posts/what-i-look-for-when-i-hire-software-engineers/","summary":"Over the years, I have had the pleasure of being a part of the hiring process. My experiences range from being a cog in the wheel of hiring for a massive corporation, and a primary decision-maker for a small start-up.\nWhat makes a good hire? It might not be what you think…\n Get Noticed The first step to getting hired at any job is to get noticed. That might be as simple as submitting an application.","title":"What I Look for When I Hire Software Engineers"},{"content":"Heading 1 \u0026ldquo;Lorem ipsum dolor sit amet, consectetaur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\u0026rdquo;\nThis continues at length and variously. The text is not really Greek, but badly garbled Latin. It started life as extracted phrases from sections 1.10.32 and 1.10.33 of Cicero\u0026rsquo;s \u0026ldquo;De Finibus Bonorum et Malorum\u0026rdquo; (\u0026ldquo;The Extremes of Good and Evil\u0026rdquo;), which read:\nHeading 2 Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\nAt vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.\nHeading 3 \u0026ldquo;Lorem ipsum dolor sit amet, consectetaur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\u0026rdquo;\nThis continues at length and variously. The text is not really Greek, but badly garbled Latin. It started life as extracted phrases from sections 1.10.32 and 1.10.33 of Cicero\u0026rsquo;s \u0026ldquo;De Finibus Bonorum et Malorum\u0026rdquo; (\u0026ldquo;The Extremes of Good and Evil\u0026rdquo;), which read:\nSed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\nHeading 4 At ver \u0026ldquo;Lorem ipsum dolor sit amet, consectetaur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\u0026rdquo;\nThis continues at length and variously. The text is not really Greek, but badly garbled Latin. It started life as extracted phrases from sections 1.10.32 and 1.10.33 of Cicero\u0026rsquo;s \u0026ldquo;De Finibus Bonorum et Malorum\u0026rdquo; (\u0026ldquo;The Extremes of Good and Evil\u0026rdquo;), which read:\nSed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\nHeading 5 At ver \u0026ldquo;Lorem ipsum dolor sit amet, consectetaur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\u0026rdquo;\nThis continues at length and variously. The text is not really Greek, but badly garbled Latin. It started life as extracted phrases from sections 1.10.32 and 1.10.33 of Cicero\u0026rsquo;s \u0026ldquo;De Finibus Bonorum et Malorum\u0026rdquo; (\u0026ldquo;The Extremes of Good and Evil\u0026rdquo;), which read:\nSed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\nAt ver\n","permalink":"http://localhost:1313/posts/lorem-ipsum/","summary":"Heading 1 \u0026ldquo;Lorem ipsum dolor sit amet, consectetaur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.","title":"Lorem Ipsum"},{"content":"OpenScope Air Traffic Control Simulator\nFor several years, I was an active maintainer of a project called OpenScope. OpenScope is a browser-based air traffic control simulator driven by JavaScript, HTML canvas, and json. There is no back end, it’s all done in the browser. It’s also open source, anybody can contribute as long as you follow the guidelines and can speak aviation.\nProblem When I first started contributing to the project, there were issues with performance.\n Before I continue, let’s cover some basics.\nCanvas: The canvas API provides a way to draw graphics using javascript and the HTML canvas element.\nAnimate: to give (a movie, character, or drawing) the appearance of movement using animation techniques.\nAnimating in code is like drawing a flip book\nIn order for things to appear to move, they must be redrawn making only small changes. A collection of these small changes, drawing over time, make the appearance of movement.\nThis is the same concept only done with code instead of pen and paper.\nOne other thing of note here is that with code, between each frame (page), we must do math to calculate exactly where the next drawing should go.\nGame Loop:  The game loop is the overall flow control for the entire game program. It’s a loop because the game keeps doing a series of actions over and over again until the user quits. Each iteration of the game loop is known as a frame. Most real-time games update several times per second: 30 and 60 are the two most common intervals. If a game runs at 60 FPS (frames per second), this means that the game loop completes 60 iterations every second.\n — source: https://www.informit.com/articles/article.aspx?p=2167437\u0026amp;seqNum=2\nBrief Introduction To OpenScope UI Running a simulator of any kind requires animation. In order to animate with code, you need to have a Game Loop. In order to do that on a browser with javascript and in a performant way, you need to use requestAnimationFrame.\nWe draw a lot of things on the HTML canvas: Navaids, terrain, moving aircraft, text, aircraft routes, SIDs, STARs, runways, etc.\nOpenScope view with all the visualizations on: Navaids, Runways, Airport, SIDs, STARs, and a selected aircraft route\nAs you can see, there is a lot going on here. The menubar at the bottom and the flyout on the right are both html elements and not part of the canvas or the animation loop.\nPerformance Problem We continued to get reports of choppy animation, or computer fans whirring louder than normal after playing for a bit. So we decided to investigate.\nIt didn’t take long for us to discover we were doing too much between frames and were “dropping frames”. Dropping frames means that a calculation from one frame is carrying over to the next, meaning we don’t have enough time to render the next frame on time. Imagine taking random pages out of the flip book above, that’s a dropped frame.\nOne pass through the performance tab on Chrome and it was painfully obvious we were dropping a ton of frames.\nThe simple cause was we were doing too much between frames. Looking at the image above, I’m sure you can see why. Everything in that view needed to be redrawn between each frame.\n Up till this point in my career, I had touched the canvas api only twice. I’d never had a chance to dive deep into canvas problems before, so I was looking forward to this challenge.\nAfter some research, I discovered two things:\n The canvas element is an HTML element (duh) that can receive styles via css. Things like background-color and stuff. This seems obvious now, but was a bit of a revelation at the time. The canvas element can have a transparent background.  Stack The Canvases For this next realization, I don’t know if I saw this in an article or came up with myself. I’m not usually this clever, so lets say I read it somewhere.\nIf we could identify the elements that changed frequently and those that did not, we could better separate things to redraw only when needed. Furthermore, if we could make that determination, we could draw each on their own HTML canvas.\nWe could stack HTML canvases!\nBorrowing two terms from React shallowRender and deepRender to describe what each canvas would do, we got to work coding it up.\nWe broke renderable things up into two groups:\n Things that need to change every frame Things that need to change when the view changes (pan/zoom). Aircraft path, terrain, navaids, SIDS/STARS, airspace, etc.  It’s not a surprise that the expensive items are all part of the deepRender group. Only updating each of those when needed was the big breakthrough and really made a huge difference in performance.\nYou can see how we manage drawing to multiple HTML canvases here in the CanvasController.\nPhoto by Sandie Clarke on Unsplash\nConclusion The morals of this story are:\n HTML canvas elements can have a transparent background and can be stacked on top of each other only re-draw expensive items when you need to  See this code in action at OpenScope or visit our repo.\n References  https://www.openscope.co/ https://github.com/openscope/openscope/blob/develop/CONTRIBUTING.md https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API https://www.informit.com/articles/article.aspx?p=2167437\u0026amp;seqNum=2 http://isaacsukin.com/news/2015/01/detailed-explanation-javascript-game-loops-and-timing https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame https://github.com/openscope/openscope https://github.com/openscope/openscope/blob/develop/src/assets/scripts/client/canvas/CanvasController.js#L402  ","permalink":"http://localhost:1313/posts/why-we-use-layered-html-canvases-at-openscope/","summary":"OpenScope Air Traffic Control Simulator\nFor several years, I was an active maintainer of a project called OpenScope. OpenScope is a browser-based air traffic control simulator driven by JavaScript, HTML canvas, and json. There is no back end, it’s all done in the browser. It’s also open source, anybody can contribute as long as you follow the guidelines and can speak aviation.\nProblem When I first started contributing to the project, there were issues with performance.","title":"Why We Use Layered HTML Canvases At OpenScope"},{"content":"Photo by Clem Onojeghuo on Unsplash\nOver the years, I have had the pleasure of being a part of the hiring process. My experiences range from being a cog in the wheel of hiring for a massive corporation, and a primary decision-maker for a small start-up.\nWhat makes a good hire? It might not be what you think…\n Get Noticed The first step to getting hired at any job is to get noticed. That might be as simple as submitting an application. It might also be as complex as leaving a lasting impression on the CEO you happened to run into.\n Before one can interview they must make themselves known.\n This seems painfully obvious, I know, but it is true. Some companies receive hundreds or even thousands of applications. As an example, for the last round of hiring I did, we received over 80 applications. Our company is less than 40 employees and our dev team was less than 10 at the time.\nAt this stage, you must be a little more persistent. Make phone calls, send emails, stop in and get to know the person at the front desk. In a virtual world, you could follow the company and comment on their posts. You could also find people who work at that company, and maybe even interact with their posts too!\nDo whatever it takes to get an interview but be friendly, respectful, and courteous. You will be more likely to leave a good impression with someone who could put in a good word for you later. You must convince them that they do actually want to spend time interviewing you.\nYou will be more likely to leave a good impression on someone who could put in a good word for you later. You must convince them that they do actually want to spend time interviewing you.\nWhat I’m looking for Your qualifications will be the first thing I look at. What if you don’t have much for qualifications? Not to worry! This can be offset by persistence or examples of past work.\nA well-curated GitHub account (or any public git repository) can be a big plus, especially if your qualifications are light. I’ll usually look at a few of the most recent repos. What am I looking for exactly?\n what have you worked on recently? how do you write code? what language(s) do you use in your projects? what tools (if any) are you using on your projects? are there any comments? are they good comments? are there any tests? how is your code structured? is there a README and is it useful?  For me, a quality public git repository account can completely offset a weak resume.\nPhoto by Quino Al on Unsplash\nPhone Interview Depending on the job and the company doing the hiring, there may be a phone interview first. Consider this a pre-interview and is likely to be informal and somewhat short. Again, be friendly, respectful, and courteous. The goal here is to get a feel for candidates and see what sort of an attitude they have.\nPhone interviews rarely go into deep detail. Instead, the focus on work history and broad concepts.\nWhat I’m Looking For Communication. How well do you communicate using only language? Where are you when doing the phone interview?\nThese days, this stage may actually be a hangout or zoom or whatever, but the questions are the same. If it is a video call, my favorite thing to do is what the eyes and face to see how you respond to questioning. I’m also keeping an eye out for, and try to be respectful of, nerves.\nIt’s okay to be nervous. You know what you should do if you’re nervous? Say that you’re nervous. For me, seeing someone nervous during an interview means that you care and that you are not a robot.\nLastly, this call serves as a control for the Interview later on. I will be able to compare your attitude between the two interviews. I’ll also be able to compare your attitude between a relaxed situation and a more stressful one (the in-person interview).\nPhoto by Jukan Tateisi on Unsplash\nCode Challenge Personally, I am a fan of short, concise code challenges. It doesn’t need to be complicated, just enough to prove they can code and just enough to see how they code. Something small like designing an API for a React component, or setting up a data model for some API response.\nOne thing I absolutely avoid here and in the following interview is anything related to algorithms. They are good to know, but not required knowledge for my team.\nThis is where the process starts looking at more than “can an engineer engineer?” An important part of this phase, and this is on the hiring side, is the feedback. If I ask a candidate to do a code challenge, at the very least they will get feedback on the work. That may be in the form of an email or it may be as part of the next stage; an in-person interview.\nEither way, a candidate is getting some feedback!\nWhat I’m Looking For Did you complete the challenge successfully? I look for the same things here as do with the public repos (if available). The big items I look for here are correctness, code quality, planning, and structure.\nPhoto by Marten Newhall on Unsplash\nInterview Here we tie it all together. I’ll ask about your past experience, dev-related or not. We’ll make some small talk and I’ll probably ask you a few dry theory questions. If you’ve done a code challenge, we will spend a good amount of time going over that in-depth.\nWhether the challenge was completed successfully is not as important as you might think. For me, I like to use challenges as a shared reference. You’ve had a chance to solve a small problem in a controlled environment that I am familiar with. At the interview, I can ask you questions about why you solved it the way you did. I can offer you constructive criticism on something that could be improved. I can poke at various parts of your solution to see what you know about the code you wrote. I can challenge your assumptions. I can ask about your thought processes and how you went about planning to complete the challenge. You did plan, right?\nPass or fail, your work is almost done. You’ve worked hard to get to this point, you made a lasting impression, and that is awesome!\nWhat I’m Looking For This may come as a surprise but I’m not looking for correct answers to my questions. Correct answers are awesome, don’t get me wrong, but what I’m looking for here is how you handle this poking and criticism. Are you answering confidently? If not, I’m going to dig into that to figure out what you might know and what you do not. Are you able to acknowledge when you might not know something? This is the most important part of the entire exercise. It really isn’t what you know, it’s how you handle not knowing that is important to me here.\nJust as important, can you handle feedback and maybe even constructive criticism? Are you humble or arrogant? Are you vulnerable or defensive?\nThese are all important things to know about a person who will be joining a team. You see, I’m not just figuring out what you do and do not know, I’m figuring out if you will fit in the team. Attitude and effort are huge. Frankly, you can be fresh out of a Bootcamp, have zero qualifications, fail the challenge, and yet still get the job. If you can have a good attitude, handle feedback with grace, ask great questions, admit when you don’t know something, and want to learn, I want you on my team. Software development is a team sport. People who have a good attitude and put in the effort are what make the team work well.\nI can teach people to code. I can’t teach people to not be a d***.\nFollow Up! After the interview (or interviews), no matter the outcome, follow up! Send a thank you card, send a thank you email. Add the interviewer(s) on LinkedIn, etc. Show that you have an interest in the job.\nEven if you don’t get the job, memorable follow-ups can leave a positive lasting impression.\n Conclusion Interviewing can be stressful. You will improve your chances by being confident, humble, honest, courteous, and kind.\nAttitude and effort can completely offset a lack of qualifications or a failed code challenge. If you’re likable, and someone who works well with others, your chances are good.\nGood luck out there!\n","permalink":"http://localhost:1313/posts/what-i-look-for-when-i-hire-software-engineers-1/","summary":"Photo by Clem Onojeghuo on Unsplash\nOver the years, I have had the pleasure of being a part of the hiring process. My experiences range from being a cog in the wheel of hiring for a massive corporation, and a primary decision-maker for a small start-up.\nWhat makes a good hire? It might not be what you think…\n Get Noticed The first step to getting hired at any job is to get noticed.","title":"What I Look For When I Hire Software Engineers"},{"content":"Photo by Thought Catalog on Unsplash\nIt started like this: I was a young Software Engineer and I wrote things down. My mentor told me to write things down and that it was a great habit to get into.\n“Don’t write everything down”, he said, “just things that are important.”\nThat way I don’t have to burden myself with remembering everything, instead I can refer to my notebook. Most of these items were little notes about problems I would run into, but always forgot how to solve them. An example of an early note is something like this:\nThe first command will list all running processes on a PORT_NUMBER. The second will shutdown a process by PID that we found with the first command. This is handy for when a process doesn’t shut down correctly. Like if a terminal window is accidentally closed and your web server is still running.\n My notebook worked for a time, but that quickly became messy. It hard to get at if I left my notebook somewhere. It was messy, because I have horrible handwriting. And, finally, a handwritten notebook is not the best place for code snippets.\nI made a good habit of continuing to keep track of these little things, though, and over time my collection grew. It grew so much that I ended up moving my list to something a little more portable: A Github Gist.\nThis also worked for a little while. My note collection continued to grow and then the gist started to get messy and also was difficult to maintain.\nThere had to be a better way!\nPut It In a Book! My constant need for organization eventually got the best of me and I realized I needed to find a better method.\nI’m a software engineer, so I thought about building a blog. I snapped out of that nightmare and realized that was a terrible idea. It would be fun, sure, but I wanted something now. I didn’t have the patience to build something from scratch.\nPhoto by Sigmund on Unsplash\nOccasionally, while software engineering, I read documentation for APIs, software, or services. Around this time I began to notice some of them were using the same service: Gitbook.\nI hadn’t planned on writing a book but this isn’t really a book. More an organized collection of notes. I try to keep it free flowing, it shouldn’t be much more than a collection of notes organized by topic. Some topics be grow, and that is fine, but I should aim to keep things note-like.\ntiskbaf — Docker. An example of the gitbook that holds my notes\nI’ve taken to calling this book tiskbaf. Which stands for Things I Should Know But Always Forget.\nMoving to Gitbook proved to be a good next step. I feel like there is a better way to do this, though it is working well for me now. I continue to add to this as I come across things I’m always looking up. I find myself referring to this more than a few times a week. It has definitely been a useful tool!\nConclusion I find myself referencing this collection of notes almost daily. I love that is a living resource. I can edit when I need to, I can create new content, I can share it if I need to.\nIt’s clean and it’s simple.\nDo you keep notes? How do you manage them? I’d love to read about your solutions in the comments!\n References:  https://gist.github.com/ https://www.gitbook.com/  ","permalink":"http://localhost:1313/posts/i-created-a-book-for-my-notes-and-you-should-too/","summary":"Photo by Thought Catalog on Unsplash\nIt started like this: I was a young Software Engineer and I wrote things down. My mentor told me to write things down and that it was a great habit to get into.\n“Don’t write everything down”, he said, “just things that are important.”\nThat way I don’t have to burden myself with remembering everything, instead I can refer to my notebook. Most of these items were little notes about problems I would run into, but always forgot how to solve them.","title":"I Created a Book for My Notes and You Should Too!"},{"content":"Photo by Ben White on Unsplash\nProblem In software, naming is often said to be one of the hardest parts. From what I’ve seen, writing tests is right up there too! I see people struggle with tests all the time. They get overwhelmed or frustrated and just skip it, which is a bad thing for everybody.\nNaming is hard because developers are rarely given a guide to naming. Over time, they learn tips and tricks and develop strategies to make naming easier. The same can be said about testing.\nWhat follows is a strategy I like to use when writing tests. It’s one I’ve encouraged my team to use as well with great success.\n Prelude First, the strategies outlined here work with most languages. The examples below are presented in Javascript and the code examples assume Jest is the test library.\nSecond, this is not TDD. TDD is a whole other animal and beyond the scope of this article.\nThird, the more seasoned developers may notice this looks very similar to gherkin. Your eyes are not lying to you, this strategy uses similar words.\nFourth, I’m sure people much smarter than I have already coined these strategies. I, and those around me, can’t be the only ones who think about writing tests this way. If you know of a better source, or you’ve seen this before, please let me know in the comments.\n Define Naming is hard because there are so many options. Tests are hard because people rarely talk about strategy, guidelines, or even where to start. Sure, there is information out there, but I’ve found it difficult for beginners to understand and actually put it to work. Frequently they get scared off by the foreign-looking syntax and if that doesn’t scare them off, they get stuck on what to write for describe or test blocks.\nI have found success by breaking tests up into sentences first. Before we write a single line of code, we first write down what we want to cover. We should concentrate on the logical branches and not get bogged down with code. At least, not just yet.\n Each group of tests should have three sections: topic, state(s), and expected result(s).\nTopic: The thing we are testing. This could be a function, a class method, a React component, etc\nStates: These are the variations a Topic might expect to handle. There will be any number of these and there may be extensions of States, too.\nExpected Result: Given specific inputs, we should expect a specific result.\nPhoto by Kelly Sikkema on Unsplash\nStart With Sentences I encourage my team to start with sentences that look somewhat like pseudo-code. This is helpful for those who are not as comfortable writing tests. This exercise allows you to focus on identifying what to test before worrying about how to write any code to do the test.\nLet’s see what this structure looks like.\ntopic- when (a specific state) - should (the expected result)  For more complex states, we extend this a bit to look like this\ntopic- when (a specific state) - and (and extension to this state) - should (the expected result) - and (and extension to this state) - should (the expected result)  There are some keywords here that we haven’t talked about yet. These words are important and should always be used to start each sentence.\nWhen: This is the first variation of a State.\nexample: “when passed a negative number”, “when prop is undefined”, “when the moon is full”, etc.\nAnd: This is an extension of the parent State. An additional concern or logical branch that might occur in State.\nexample: “and #currentSearchTerm is an empty string”, “and #currentSearchTerm includes #name”, etc\nShould: The expectation. What do we expect to happen here? This sentence will probably look similar to your final assertion.\nexample: “should not throw”, or “should return and instance of Foo”, “should return an error”, etc.\nSentences for each of these should be short and unique. If you find your test descriptions going past 120 characters, they are too long.\nIn my opinion, you really don’t need much more in terms of structure. I’d encourage you to nest when and and no deeper than 3–4 levels. With this you have readability, context, and simplicity. Its easy to maintain and there are built-in expectations for everyone as they write tests. This leads to sameness, which then leads to maintainability. 🎉\n Photo by AltumCode on Unsplash\nWrite Some Tests Now that we’ve gone over the theory, let’s put it to work! Look at the small function below. We will use this function as a Topic in some tests so we can see how this all might work in real life.\nA simple max function. Yes, there is a javascript built-in that does this already. For demonstration purposes only.\nHere we have a simple function called max that takes in two values, compares them, and returns the maximum of the two. There is some logic in this function that we need to test. Using sentences and not code, let’s begin.\n First think about some of the possible logical branches here and then use the words we talked about above to explain them. Starting is frequently the hardest part, so let’s start small. We won’t even care about the expectations here, only some of the states.\nWhat are some of the logical branches we should care about here? This doesn’t need to be perfect, or even complete, we just need somewhere to start.\nmax- when `valueOne` is equal to `valueTwo`- when `valueOne` is less than `valueTwo`- when `valueOne` is greater than `valueTwo`  That seems a little too easy right? Let us continue by adding some of the expectations that go along with these states.\nmax- when `valueOne` is equal to `valueTwo` - should return `valueOne` - when `valueOne` is less than `valueTwo` - should return `valueTwo` - when `valueOne` is greater than `valueTwo` - should return `valueOne`  There you have it! We have some sentences that we can translate to code. These sentences read like english and not pseudo code. Go ahead, read one of those blocks to yourself right now.\nReads nice doesn’t it 😉\nAre there any conditions here I missed? (Hint: yes). Can you find them and write your own sentence(s)?\nTranslate Sentences To Tests Using the sentences we already wrote we can now translate those into something that looks like a real test file:\nBelieve it or not, this is just enough code to run! Jest will output different colors for test.todo() blocks, so this is actually valid code! Personally, I like to scaffold out my tests this way.\nUsing todo doesn’t give us much other than a list of todos, though, so let’s fill these in with some real tests:\nYou can see, there isn’t much code required to make these tests test things. We’ve already done the hard part by writing sentences to determine most of what we wrote here in code. Doing that part first, makes writing the test pretty simple.\nThere are a few other things I’ll call out here as personal preferences, your mileage may vary:\n use a variable named result to store the output of the item under test when it makes sense, use a variable named expectedResult to store, you guessed it, the expected result  Doing this makes your tests read really well_:_\nexpect(result).toEqual(expectedResult)  This has the added benefits of A) having a reliable place to change an expectation if the code changes in the future, and B) keeps the assertion super clean.\nWhat we have is a pretty good start! These tests read well and give you some decent test coverage. However, there is some room for improvement. In the interest of making our tests read well, instead of using magic numbers we should add some meaning to those numbers.\nMoving the inputs to variables gives them context. Those numbers now mean something. Giving these things names makes it easy to understand what is going on and, more importantly, what the context is. It makes it easy for anyone to look at these tests and understand what is happening.\nConclusion There you have it! Write tests with sentences first, then move them into code. It makes the process predictable, less scary, and easy to teach.\ntopic -\u0026gt; when -\u0026gt; should  Every time I write tests I start this way. I flesh out the logical branches, then the expectation blocks, then start filling in the test code. I do this same exercise when scoping out new work for my team, too, and in some new cases, have included these sentences in the actual tickets. I’m anxious to see how that plays out, stay tuned!\n References  https://martinfowler.com/bliki/TwoHardThings.html https://en.wikipedia.org/wiki/Test-driven_development https://cucumber.io/docs/gherkin/reference/ https://jestjs.io/ https://jestjs.io/docs/api#testtodoname  ","permalink":"http://localhost:1313/posts/write-tests-with-sentences-first-code-second/","summary":"Photo by Ben White on Unsplash\nProblem In software, naming is often said to be one of the hardest parts. From what I’ve seen, writing tests is right up there too! I see people struggle with tests all the time. They get overwhelmed or frustrated and just skip it, which is a bad thing for everybody.\nNaming is hard because developers are rarely given a guide to naming. Over time, they learn tips and tricks and develop strategies to make naming easier.","title":"Write Tests With Sentences First, Code Second"},{"content":"Recently, at Parallax, my team and I released a sweeping update to our user interface. We updated buttons, inputs, selects, dialogs, and many other visual elements. What follows is an explanation of one small part of that effort.\n Problem In the summer of 2021, my team and I were presented with a few interesting challenges. The next set of work would entail:\n Update many of our shared components with new styles (buttons, inputs, selects, dialogs, etc) Many of these updates would affect design, but we would also take the opportunity to slim down component APIs We should plan on not being able to release everything at once. Doing so would mean a massive change and a risky release We should be able to switch between old and new component variations without code changes  Let’s dig into this a little bit.\nUpdating designs isn’t anything new. This happens all the time and it’s something we plan for. Doing so much of it all at once was new and was a sizable task.\nDoing so much change all at once, while also continuing to maintain the current components, added an additional layer of complexity. It was necessary otherwise we would miss the window we had to make these changes, with new feature work coming in hot shortly after this would finish. This much change would incur a significant amount of tech debt. It adds to the effort both before and after release. We were okay with this, but isn’t something to discount.\nPhoto by Marek Piwnicki on Unsplash\nIdeation Going into this project we knew we would need some sort of Feature Flag. We already use Launch Darkly elsewhere within the UI (and BE) so that part was already in place.\nWith a Feature Flag solution already in place, the next major challenge was to figure out a way to keep the current components in place while also updating each implementation to use new variations on demand. This made things interesting. Do we update in place, or do we spin up new versions next to the old ones? Both strategies have pros and cons and, after much deliberation, we determined neither was really the correct path forward. We would use both!\nNow, with a general direction decided on, we needed to figure out some way to switch between an old or new component variation on demand, without having to change any code. Our UI is built on React (Next.js specifically), so this actually turned out to be a pretty short adventure.\n Solution After quite a bit of forethought, we decided to create a new component called UiExperiment(we prefix our shared components with Ui so they are easy to pick out). This component would accept an “old” component and a “new” component (ReactNode) as props, and also a prop to determine which one should render which would be driven by a feature flag.\nUiExperiment React component, with Typescript\nNote: ExperimentName and Experiment live next to this component only for easy demonstration. In real life, these live in a *.constants.ts and *.types.ts file next to the component file.\nBy design, this is a pretty simple component. If isExperimentActive is passed as false, render what was passed as props.a. If it is passed as true, render props.b. In real life, the value of isExperimentActive comes from a feature flag. You might see, though, how this might be super powerful beyond what we’ve done here. Perhaps leveraging a component like this for true experiments, or using this for access control, etc.\nUsing UiExperiment in the app is now quite simple. In places where we will switch out old for new, we add UiExperiment around the current component, then add in the new one right next to it. We can do all that work now, continue to push to production, and “flip the switch” only when we are ready to release these updates to our users.\nExample usage of UiExperiment component\n Wait a minute, let’s take a look at those props again.\nUiExperiment props and supporting types\nWhy would we set up the props this way? Well, we are doing a little future work here. We built this component to solve a single problem for today, but we realized early on that this could be used for some other cool things too. What if we wanted to do experiments on variations of more than 2 components? Or serve up a different experience based on some flag?\nThe original api of UiExperiment did not use the prop isExperimentActive, which is just a simple flag. Instead, we passed ExperimentName as a prop named activeExperiment. This meant we could have had n number of experiments and it would be strongly typed!\nI’ll say, though, the reason we went with a simple toggle here is because, in practice, this actually turned out to be more work than we’d planned. Instead of passing a flag, the implementing component had to do a bit of logic first to pass the correct enum, which was not ideal. It ended up being too clunky and led to code that was harder to read.\nIn the future we may bring back that prop, but for this project it just didn’t make sense.\nPhoto by Dmitry Ratushny on Unsplash\nLearnings Existing Component APIs Some readers may be wondering why we didn’t put this logical switch inside of each existing UI component?\nWhat if we used a flag on existing components?\nWe certainly could have done that, and in some cases we did. For the most part, though, we wanted to have something portable that would be easy to repeat throughout the app. In the cases where we used a flag on a component, it was usually because we were only switching styles and nothing more. In those cases, it made sense to put the flag on the component.\nAnother part of this is because most of the time the work wasn’t just updating designs, it was also updating component apis. In many cases it made more sense to spin up completely new and simple components and then leverage UiExperiment to switch between old and new versions.\nCleanup This effort required planning to do the work before release, but also work post-release. Using UiExperiment would incur tech-debt and we planned to remove that ASAP after release.\nOne benefit of UiExperiment was that the new component versions would already be in place. Once we were ready to clean up and remove all the old code, we removed things around the new implementations. It would be purely subtractive, which makes this a little easier. We could easily remove the wrapping UiExperiment and delete the old components and we were done. Typescript would guide us on the isV1 flags, by removing the prop from a component and addressing any TS errors that popped up as a result.\nNaming We still aren’t happy with the prop names a and b. My team and I take naming very seriously and these two names still feel like… Well, these could have been better.\n Conclusion This component turned out to be a lifesaver for us! It allowed us to work on all the UI updates while still pushing features to production. Because we planned ahead to use feature flags, we could take this one step further via Launch Darkly and target flags states to specific users. This meant we could beta test all the design updates behind the scenes in production before we rolled this out to all of our users!\nIn the end, this component did everything we needed and more, and continues to live on in our app. The tech debt we incurred by using this in, literally, hundreds of places, turned out to be less than we thought too. After we released these updates, we were able to remove all of the UiExperiments related to this work. We’d planned for about two whole weeks but turned out we didn’t need it, it only took a week!! 🎉\nIf you want to tinker with UiExperiment yourself, I have put together a simple CodeSandbox for my readers.\nHave you done anything like this before? Is there a better way? I’d love to hear about it, let me know in the comments!\n References  https://martinfowler.com/articles/feature-toggles.html https://launchdarkly.com/ https://reactjs.org/ https://nextjs.org/ https://medium.com/counterarts/tinker-with-purpose-9fb4f5a52459 https://codesandbox.io/s/ui-experiment-example-eoj94  ","permalink":"http://localhost:1313/posts/use-react-and-feature-flags-to-roll-out-new-ui-components/","summary":"Recently, at Parallax, my team and I released a sweeping update to our user interface. We updated buttons, inputs, selects, dialogs, and many other visual elements. What follows is an explanation of one small part of that effort.\n Problem In the summer of 2021, my team and I were presented with a few interesting challenges. The next set of work would entail:\n Update many of our shared components with new styles (buttons, inputs, selects, dialogs, etc) Many of these updates would affect design, but we would also take the opportunity to slim down component APIs We should plan on not being able to release everything at once.","title":"Use React and Feature Flags To Roll Out New UI Components"},{"content":"Photo by Sigmund on Unsplash\nThe word _Tinker _is defined as:\n To repair, adjust, or work with something in an unskilled or experimental manner\n Early in my career as a Software Engineer, I had a conversation with one of my first mentors that went something like this:\n Mentor: “You’re a tinkerer, you know”\n  Me: “Why yes, I suppose I am”\n  Mentor: “Tinkering can be bad, unless you’re tinkering with purpose. If you tinker with purpose, that can be a very powerful thing”\n My takeaway from this is that I should be deliberate in my tinkering, and not just tinker to tinker.\nHistorical Context Like may Front-End developers, I am self taught. I’ve been playing with web technologies since the late 1990s. I can remember a time before CSS and JavaScript were even a thing. I can also remember learning to build websites by just looking at their source.\nI learned by playing. Trying things and then failing, a lot! Most of the time I pushed through enough to get something working, but shortly after that I’d move on to the next thing. When I was younger I did this a lot. Over time each of these small accomplishments built on each other to form the foundations of what I know today.\nMany engineers I have come in contact with have taken a similar path.\nPhoto by Jeff Nissen on Unsplash\nWeird Gaps One problem with this strategy of tinkering, is that it is rarely focused. I’d move from technology to technology and solve the problem of the day, but rarely took the time to zoom out and understand why or go any deeper than I needed to solve a problem. This is specifically what my mentor was getting at. This strategy resulted in, as another mentor called it: Weird Gaps. I had weird gaps in my knowledge.\nI could spin up an entire Front-End build system with Gulp, but couldn’t tell you what a Stream was. I could put together a complex UI layout, but couldn’t tell you why I used float.\n Purpose I’ve learned over the years that my brain retains the most information and works best when tinkering. I still tinker but I approach tinkering a bit differently today.\nInstead of picking up a new library, tool, or language just for fun, I try to have a goal in mind. A Definition Of Done, if you will. When trying something new what am I trying to accomplish? How will I know if succeeded? What am I trying to learn? Here are some of my tinkerings:\n Deploy a NextJs app to Azure using Azure DevOps pipelines, Docker, and Terraform Get current crypto quotes from a crypto exchange Generate detailed charts from chess.com game stats Publish an npm package for a cli tool  Approaching tinkering this way, with a goal in mind, has allowed me to use my time more effectively while also continuing to enjoy messing around with new and unfamiliar things. This still leaves room for happy accidents and “just figuring it out”, but also requires a little more study. If I know I want to do X, what are the things I need to do to get there?\nPhoto by Marten Newhall on Unsplash\nConclusion Instead of aimlessly tinkering to tinker, doing so with a goal in mind has helped me grow faster as a Software Engineer.\nDo you tinker? Do you have tinkering strategies?\n References:  https://gulpjs.com/ https://nodejs.org/api/stream.html https://developer.mozilla.org/en-US/docs/Web/CSS/float  ","permalink":"http://localhost:1313/posts/tinker-with-purpose/","summary":"Photo by Sigmund on Unsplash\nThe word _Tinker _is defined as:\n To repair, adjust, or work with something in an unskilled or experimental manner\n Early in my career as a Software Engineer, I had a conversation with one of my first mentors that went something like this:\n Mentor: “You’re a tinkerer, you know”\n  Me: “Why yes, I suppose I am”\n  Mentor: “Tinkering can be bad, unless you’re tinkering with purpose.","title":"Tinker With Purpose"},{"content":"The finished build: 65% Lucky Jade mechanical keyboard.\nIntroduction I wanted to share with you today my latest mechanical keyboard build.\nIt’s been a little over two years since my last build, and this makes my 3rd full build. I am by no means an expert, but I have been lurking around the hobby for a number of years.\nI’ll mention straight away that this build could have gone better. Some things went well; however, there were some rookie mistakes I made early on in the build that would have made for a much softer landing in the end. Overall, the build did produce a nice looking keyboard that I look forward to using for the next little while. Who knows, maybe it’ll be my next daily driver?\n Parts of a Mechanical Keyboard Before we begin, lets review the major parts of a mechanical keyboard:\nSwitch\nThese are the things underneath each keycap. Their job is to complete an electrical circuit which then translates into a keypress. Think of switches as something like a light switch.\nThere are 3 major types of switches, Linear, Tactile, and Clicky.\nThere are hundreds of different switches out there to choose from, but all of them will fall into one of the three main categories.\n—\nRead more:\nhttps://aziocorp.com/blogs/blog/get-to-know-your-keyboard-the-3-types-of-mechanical-switches\nhttps://dygma.com/blogs/stories/the-ultimate-guide-to-mechanical-keyboard-switches-for-2020\nStabilizer\nSome keys are bigger than others. Keys like the Spacebar, Shift, or Backspace keys on a standard keyboard. These wider keys need supports, or stabilizers, on the left and right side of the switch otherwise the key will wobble when pressed. Or, a press to one side of the key may not translate into a complete keypress.\nKeycap\nThese are the things with the letters and are typically sold as a set and usually revolve around a theme. This theme can literally be anything.\nPCB\nPCB stands for Printed Circuit Board. This what the switches connect to, either via solder or hot-swappable connectors. Hot-swap connections, as the name suggests, is a non-permanent connection and allows for easily changing out switches.\nA PCB is not necessary for a build, it is possible to hand-wire a keyboard if one were so inclined.\nRead More:\n https://www.crackedthecode.co/a-complete-guide-to-building-a-hand-wired-keyboard/ https://matt3o.com/hand-wiring-a-custom-keyboard/  Case\nIt is typically made out of some sort of metal or polycarbonate and is the container for all the keyboard parts and should be sturdy enough to keep everything firmly together while the user types away. These come in all shapes and sizes and are sometimes described by percentages. 100% is equivalent to full size keyboard with 10 key.\nRead more :\n https://www.reddit.com/r/MechanicalKeyboards/comments/n1sq5k/keyboard_size_guide/   Sourcing Parts I’ve been slowly collecting the parts for this build for the last 16 months, since around February 2020. I tend to build Keyboards based on the keycaps, so when the Lucky Jade group buy popped up, this keyboard was born.\nAliaz Silent Tactile (60g) and Kailh Burnt Orange switches, Lucky Jade keycaps, Tada68 65% PCB and Silver, Aluminum case. Pictured with plate mount stabilizers\nOther than the keycaps, this is a pretty straightforward build. We will be building on a 65% PCB. I have a few 65% keyboards already, but they just never fit well with me. I love the idea of a 65% keyboard. I’m anxious to see if this is the one.\nWe’ll be using silent tactile switches. This means you can feel a little bump just after you press down, but there isn’t a super loud clicky noise after the press.\nList of Parts:\n Lucky Jade Keycaps Tada68 65% Case Tada68 PCB Aliaz Silent Tactile Switch / 60g Novelkeys x Kailh Box Heavy Switches, Burnt Orange  You’ll notice I have two different sets of switches listed. I like to use a different switch for the outside keys. It gives a slightly different feel for those keys. I don’t know, maybe its a little weird, but I like it so 🤷‍♂.\n Keyboard Build Preparation The very first thing I do before a build is probably the most obvious: make sure I have all the parts! There are quite a few parts that make up a mechanical keyboard, and frequently come from multiple sources. So, before you build, make sure everything is accounted for!\nNote: I’ve recently started using a spreadsheet to help with this. It’s made planning and tracking parts for future builds a breeze!\nTesting PCB\nNow that we have everything, the next most important step is to test the PCB. There isn’t much sense continuing if the PCB is fried or unusable.\nTo test the PCB, I use a wonderful tool from the folks at QMK called the QMK Configurator. Wait, how do we test the PCB without keycaps…\nA tweezer!\nTesting PCB contacts with a tweezer and the QMK Configurator\nWhat is actually happening here is the same thing that happens when you press down on a keycap. The electrical circuit is completed, its like flipping a light switch on or off.\nUsing a tweezer and the configurator we can easily see if all the switches are working. With this particular PCB, they were not. There was one set of contacts that would not respond. Upon further inspection, it looked like two sets of contacts were running into each other. Thankfully, this was what would normally be the right hand Alt key. I rarely use this key, so I decided to continue with the build.\nAssembly — Stabilizers Clip and Grease\nLarge keys need stabilizers. In order to make those larger keys work smoothly, respond (or recoil) quickly, and not make too much noise, there are a few things we must do:\nClip, Lube and Bandaid the stabilizers.\nClip. Lube and Bandaid stabilizers\nI should mention, these are plate mounted stabilizers. Quite cheap ones at that. When I started this phase of the project I muttered to myself\n “I’m going to regret using these”\n And, as it turns out, I was right. I did.\nAssembly — Switches, Pt. 1 This is where we start putting all the parts together. I still like to take my time at this phase, making very sure things are positioned correctly and everything is fitting together well.\nHere is the method to the placement of first few switches:\n All the keys that need stabilizers Each corner One along the top row  Snapping the first few switches in the switch plate just before soldering to the PCB\nThe goal here isn’t to place all the switches at once. Instead, we want to get enough switches in place for the switch plate to be well secured. Once things are soldered its much more difficult to undo things.\nIts good to start placing some keycaps at this phase, too, and testing things. Do the keys press? Do they recoil? Are they snappy? I wish I would have done this a little more thoroughly on this build…\nAssembly — Switches, Pt. 2 Whew, we’re in the home stretch. Almost all the hard work is behind us, now it’s just a matter of placing the remaining switches and soldering them all up. This can take a little bit of time, depending on how comfortable you are with soldering. Still, its important to go slow and periodically check your work. Don’t over-solder, you want a good connection but not so much solder that you can’t see the switch stem any more or so much that it covers a neighboring contact. Conversely, don’t under-solder. You want the contact to be covered with just a little bit of the switch stem poking out of the top.\nAim for perfection here but good is all we need.\nPlacing switches before soldering them to a PCB\nSoldering mechanical keyboard switches to a PCB\nUnderside of the PCB after all the switches have been soldered\nFinal Assembly Now we place the keycaps!\nAdding keycaps to switches that have been soldered to the PCB\nDepending on the keycaps, this can take almost as much time as soldering. At least for me, I tend to agonize over which keycap to use for each system key. Keep in mind, also, that these might change once we finalize the keymap.\nSecure the PCB After the switches have been soldered and the keycaps secured (or at least selected), it’s time to secure the PCB to the case. For this build, there were six tiny screws that needed to be fastened.\nThis is a little more delicate that it first seems. The screws are small and there is this lovely gap between the PCB and the switch plate. Its very easy to get a screw off vertical and suddenly stuck between the PCB and switch plate.\nFastening the PCB to the case via mounting screws\nWhoops, I Made a Mistake! It wasn’t until this phase of the project that I realized I made a boo-boo. I put dielectric grease around the inside of two of the stabilizer housings. Admittedly, this was a rookie mistake. Putting grease here had the opposite effect; it made the stabilizers stick. This means that two keys would not recoil after being pressed.\nThankfully, this is a solvable problem. It did require an extra amount of work though and was more than a little a pain in the a**.\nHere are the steps for getting this bug resolved:\n Pull out around 10 keycaps to get to each mounting screw Un-mount PCB from case De-solder the two switches with affected stabilizers Remove sticky stabilizers Clean grease out of sticky stabilizers. Re-attach stabilizers Re-solder removed switches Test fix (it worked!) Re-attach PCB to case Place removed keycaps back on their switches  Detached PCB and switch plate with offending stabilizers removed, and corresponding switches de-soldered\nFlashing With everything back together and working, now we type! I’m a fan of a website called Monkeytype for this because its fast, clean, and easy to use. What we are looking for here is feel and function: Does it feel correct? Does it feel nice to type on? Does it work the way our hands expect? This is also where I start making mental notes about the keymap and what I might change.\nChanging the keymap for this keyboard is going to be done with the help of, again, the good people at QMK. We’ll be using the QMK Configurator for this, too.\nOut of the box, the Tada68 comes with a pretty standard 2-layer 65% keymap.\nI’m a little bit particular with my keymaps, so I tend to tinker with them a little bit. In the end, I ended up flashing this board 5 or 6 times until I was able to get things just the way I like it.\nHere is what I ended up with:\nFinished Lucky Jade + Tada68 mechanical keyboard keymap\nCompleted Lucky Jade Build This was a fun build and was a long time coming, too. Some of the parts for this build were purchased 16 months ago, way back in February of 2020 (like, a lifetime ago!).\nOverall the build went fairly well. There were some bumps along the way, sure, but we made it through and ended the day with a pretty great feeling (and looking) mechanical keyboard.\n References\n https://aziocorp.com/blogs/blog/get-to-know-your-keyboard-the-3-types-of-mechanical-switches https://dygma.com/blogs/stories/the-ultimate-guide-to-mechanical-keyboard-switches-for-2020 https://www.crackedthecode.co/a-complete-guide-to-building-a-hand-wired-keyboard/ https://matt3o.com/hand-wiring-a-custom-keyboard/ https://www.reddit.com/r/MechanicalKeyboards/comments/n1sq5k/keyboard_size_guide/ https://config.qmk.fm/#/test https://www.youtube.com/watch?v=cD5Zj-ZgMLA https://monkeytype.com/ https://config.qmk.fm/#/tada68/LAYOUT_65_ansi  Parts\n https://cannonkeys.com/products/gb-kat-lucky-jade https://kbdfans.com/products/kbdfans-tada68-aluminum-case https://kbdfans.com/collections/aliaz-switches/products/pre-orderaliaz-silent-switch-tactile https://kbdfans.com/products/novelkeys-x-kailh-box-heavy-switches-10pcs?variant=2467740909581  ","permalink":"http://localhost:1313/posts/i-built-a-mechanical-keyboard/","summary":"The finished build: 65% Lucky Jade mechanical keyboard.\nIntroduction I wanted to share with you today my latest mechanical keyboard build.\nIt’s been a little over two years since my last build, and this makes my 3rd full build. I am by no means an expert, but I have been lurking around the hobby for a number of years.\nI’ll mention straight away that this build could have gone better. Some things went well; however, there were some rookie mistakes I made early on in the build that would have made for a much softer landing in the end.","title":"I Built A Mechanical Keyboard"},{"content":"Leading software projects can be a challenging endeavor. I’ve been leading software projects big and small for the last 5 years. What follows are some lessons I’ve learned through hardship, from peers, and from mentors along the way.\nPhoto by Andres Garcia on Unsplash\n  Stress comes from the unknown, an unclear path forward, or both.\n Things are rarely as bad as they seem. Work towards a plan, and two or three backup plans. Once you have a plan(s) things won’t seem so scary and you won’t be nearly as stressed.\n  The project lead owns the plan and works to make sure the team executes it.\n Photo by Halacious on Unsplash\nThis may seem obvious, but sometimes it’s worth re-iterating. The lead owns the plan. That doesn’t necessarily mean the lead creates the plan. It’s up to you to facilitate but it may not always come from you. Sometimes the best plans come from the group. Sometimes the group doesn’t have all the information to make a great plan. Sometimes it will come from you, sometimes it won’t.\n  If you have a plan, ideally with options, you will be able to react quickly to keep things on track\n When it’s crunch time, 100 things come at you at once. Some you will expect some you will not. Having a plan, even if it’s only a mental model, will allow you to adapt and continue moving forward.\nPhoto by Eugenio Mazzone on Unsplash\n  Sometimes the path forward is to ask for more time\n Photo by Ken Lawrence on Unsplash\nIt’s rarely an easy discussion and frequently the last option. Occasionally, though, this is one discussion that needs to happen. The earlier the better.\n  Frequent communication between stakeholders, development, and anyone else who cares, makes difficult discussions easier later on\n Photo by Jason Rosewell on Unsplash\nNobody likes surprises. If things aren’t going well, say so and say so early. If product owner(s) and/or project manager(s) already knows the team is facing unforeseen challenges and working 80 hour weeks, they won’t be as surprised when you ask for more time.\n","permalink":"http://localhost:1313/posts/lead-lessons-part-1/","summary":"Leading software projects can be a challenging endeavor. I’ve been leading software projects big and small for the last 5 years. What follows are some lessons I’ve learned through hardship, from peers, and from mentors along the way.\nPhoto by Andres Garcia on Unsplash\n  Stress comes from the unknown, an unclear path forward, or both.\n Things are rarely as bad as they seem. Work towards a plan, and two or three backup plans.","title":"Lead Lessons, Part 1"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.— Rob Pike1 Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Italics Bold Code     italics bold code    Code Blocks Code block with backticks \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Fruit  Apple Orange Banana   Dairy  Milk Cheese      The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n  ","permalink":"http://localhost:1313/posts/markdown-syntax-guide/","summary":"\u003cp\u003eThis article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\u003c/p\u003e","title":"Markdown Syntax Guide"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site configuration and then you can type emoji shorthand codes directly in content files.\nThese begin and end with a colon and include the code of an emoji:\nGone camping! {?:}tent: Be back soon. That is so funny! {?:}joy: The rendered output looks like this:\nGone camping! :tent: Be back soon.\nThat is so funny! :joy:\nThe following cheat sheet is a useful reference for emoji shorthand codes.\nSmileys \u0026amp; Emotion Face Smiling    icon code icon code     :grinning: grinning :smiley: smiley   :smile: smile :grin: grin   :laughing: laughing satisfied :sweat_smile: sweat_smile   :rofl: rofl :joy: joy   :slightly_smiling_face: slightly_smiling_face :upside_down_face: upside_down_face   :wink: wink :blush: blush   :innocent: innocent      Face Affection    icon code icon code     :heart_eyes: heart_eyes :kissing_heart: kissing_heart   :kissing: kissing :relaxed: relaxed   :kissing_closed_eyes: kissing_closed_eyes :kissing_smiling_eyes: kissing_smiling_eyes    Face Tongue    icon code icon code     :yum: yum :stuck_out_tongue: stuck_out_tongue   :stuck_out_tongue_winking_eye: stuck_out_tongue_winking_eye :stuck_out_tongue_closed_eyes: stuck_out_tongue_closed_eyes   :money_mouth_face: money_mouth_face      Face Hand    icon code icon code     :hugs: hugs :thinking: thinking    Face Neutral Skeptical    icon code icon code     :zipper_mouth_face: zipper_mouth_face :neutral_face: neutral_face   :expressionless: expressionless :no_mouth: no_mouth   :smirk: smirk :unamused: unamused   :roll_eyes: roll_eyes :grimacing: grimacing   :lying_face: lying_face      Face Sleepy    icon code icon code     :relieved: relieved :pensive: pensive   :sleepy: sleepy :drooling_face: drooling_face   :sleeping: sleeping      Face Unwell    icon code icon code     :mask: mask :face_with_thermometer: face_with_thermometer   :face_with_head_bandage: face_with_head_bandage :nauseated_face: nauseated_face   :sneezing_face: sneezing_face :dizzy_face: dizzy_face    Face Hat    icon code icon code     :cowboy_hat_face: cowboy_hat_face      Face Glasses    icon code icon code     :sunglasses: sunglasses :nerd_face: nerd_face    Face Concerned    icon code icon code     :confused: confused :worried: worried   :slightly_frowning_face: slightly_frowning_face :frowning_face: frowning_face   :open_mouth: open_mouth :hushed: hushed   :astonished: astonished :flushed: flushed   :frowning: frowning :anguished: anguished   :fearful: fearful :cold_sweat: cold_sweat   :disappointed_relieved: disappointed_relieved :cry: cry   :sob: sob :scream: scream   :confounded: confounded :persevere: persevere   :disappointed: disappointed :sweat: sweat   :weary: weary :tired_face: tired_face    Face Negative    icon code icon code     :triumph: triumph :pout: pout rage   :angry: angry :smiling_imp: smiling_imp   :imp: imp :skull: skull   :skull_and_crossbones: skull_and_crossbones      Face Costume    icon code icon code     :hankey: hankey poop shit :clown_face: clown_face   :japanese_ogre: japanese_ogre :japanese_goblin: japanese_goblin   :ghost: ghost :alien: alien   :space_invader: space_invader :robot: robot    Cat Face    icon code icon code     :smiley_cat: smiley_cat :smile_cat: smile_cat   :joy_cat: joy_cat :heart_eyes_cat: heart_eyes_cat   :smirk_cat: smirk_cat :kissing_cat: kissing_cat   :scream_cat: scream_cat :crying_cat_face: crying_cat_face   :pouting_cat: pouting_cat      Monkey Face    icon code icon code     :see_no_evil: see_no_evil :hear_no_evil: hear_no_evil   :speak_no_evil: speak_no_evil      Emotion    icon code icon code     :kiss: kiss :love_letter: love_letter   :cupid: cupid :gift_heart: gift_heart   :sparkling_heart: sparkling_heart :heartpulse: heartpulse   :heartbeat: heartbeat :revolving_hearts: revolving_hearts   :two_hearts: two_hearts :heart_decoration: heart_decoration   :heavy_heart_exclamation: heavy_heart_exclamation :broken_heart: broken_heart   :heart: heart :yellow_heart: yellow_heart   :green_heart: green_heart :blue_heart: blue_heart   :purple_heart: purple_heart :black_heart: black_heart   :100: 100 :anger: anger   :boom: boom collision :dizzy: dizzy   :sweat_drops: sweat_drops :dash: dash   :hole: hole :bomb: bomb   :speech_balloon: speech_balloon :eye_speech_bubble: eye_speech_bubble   :right_anger_bubble: right_anger_bubble :thought_balloon: thought_balloon   :zzz: zzz      People \u0026amp; Body Hand Fingers Open    icon code icon code     :wave: wave :raised_back_of_hand: raised_back_of_hand   :raised_hand_with_fingers_splayed: raised_hand_with_fingers_splayed :hand: hand raised_hand   :vulcan_salute: vulcan_salute      Hand Fingers Partial    icon code icon code     :ok_hand: ok_hand :v: v   :crossed_fingers: crossed_fingers :metal: metal   :call_me_hand: call_me_hand      Hand Single Finger    icon code icon code     :point_left: point_left :point_right: point_right   :point_up_2: point_up_2 :fu: fu middle_finger   :point_down: point_down :point_up: point_up    Hand Fingers Closed    icon code icon code     :+1: +1 thumbsup :-1: -1 thumbsdown   :fist: fist fist_raised :facepunch: facepunch fist_oncoming punch   :fist_left: fist_left :fist_right: fist_right    Hands    icon code icon code     :clap: clap :raised_hands: raised_hands   :open_hands: open_hands :handshake: handshake   :pray: pray      Hand Prop    icon code icon code     :writing_hand: writing_hand :nail_care: nail_care   :selfie: selfie      Body Parts    icon code icon code     :muscle: muscle :ear: ear   :nose: nose :eyes: eyes   :eye: eye :tongue: tongue   :lips: lips      Person    icon code icon code     :baby: baby :boy: boy   :girl: girl :blonde_man: blonde_man person_with_blond_hair   :man: man :woman: woman   :blonde_woman: blonde_woman :older_man: older_man   :older_woman: older_woman      Person Gesture    icon code icon code     :frowning_woman: frowning_woman person_frowning :frowning_man: frowning_man   :person_with_pouting_face: person_with_pouting_face pouting_woman :pouting_man: pouting_man   :ng_woman: ng_woman no_good no_good_woman :ng_man: ng_man no_good_man   :ok_woman: ok_woman :ok_man: ok_man   :information_desk_person: information_desk_person sassy_woman tipping_hand_woman :sassy_man: sassy_man tipping_hand_man   :raising_hand: raising_hand raising_hand_woman :raising_hand_man: raising_hand_man   :bow: bow bowing_man :bowing_woman: bowing_woman   :man_facepalming: man_facepalming :woman_facepalming: woman_facepalming   :man_shrugging: man_shrugging :woman_shrugging: woman_shrugging    Person Role    icon code icon code     :man_health_worker: man_health_worker :woman_health_worker: woman_health_worker   :man_student: man_student :woman_student: woman_student   :man_teacher: man_teacher :woman_teacher: woman_teacher   :man_judge: man_judge :woman_judge: woman_judge   :man_farmer: man_farmer :woman_farmer: woman_farmer   :man_cook: man_cook :woman_cook: woman_cook   :man_mechanic: man_mechanic :woman_mechanic: woman_mechanic   :man_factory_worker: man_factory_worker :woman_factory_worker: woman_factory_worker   :man_office_worker: man_office_worker :woman_office_worker: woman_office_worker   :man_scientist: man_scientist :woman_scientist: woman_scientist   :man_technologist: man_technologist :woman_technologist: woman_technologist   :man_singer: man_singer :woman_singer: woman_singer   :man_artist: man_artist :woman_artist: woman_artist   :man_pilot: man_pilot :woman_pilot: woman_pilot   :man_astronaut: man_astronaut :woman_astronaut: woman_astronaut   :man_firefighter: man_firefighter :woman_firefighter: woman_firefighter   :cop: cop policeman :policewoman: policewoman   :detective: detective male_detective :female_detective: female_detective   :guardsman: guardsman :guardswoman: guardswoman   :construction_worker: construction_worker construction_worker_man :construction_worker_woman: construction_worker_woman   :prince: prince :princess: princess   :man_with_turban: man_with_turban :woman_with_turban: woman_with_turban   :man_with_gua_pi_mao: man_with_gua_pi_mao :man_in_tuxedo: man_in_tuxedo   :bride_with_veil: bride_with_veil :pregnant_woman: pregnant_woman    Person Fantasy    icon code icon code     :angel: angel :santa: santa   :mrs_claus: mrs_claus      Person Activity    icon code icon code     :massage: massage massage_woman :massage_man: massage_man   :haircut: haircut haircut_woman :haircut_man: haircut_man   :walking: walking walking_man :walking_woman: walking_woman   :runner: runner running running_man :running_woman: running_woman   :dancer: dancer :man_dancing: man_dancing   :business_suit_levitating: business_suit_levitating :dancers: dancers dancing_women   :dancing_men: dancing_men      Person Sport    icon code icon code     :person_fencing: person_fencing :horse_racing: horse_racing   :skier: skier :snowboarder: snowboarder   :golfing_man: golfing_man :golfing_woman: golfing_woman   :surfer: surfer surfing_man :surfing_woman: surfing_woman   :rowboat: rowboat rowing_man :rowing_woman: rowing_woman   :swimmer: swimmer swimming_man :swimming_woman: swimming_woman   :basketball_man: basketball_man :basketball_woman: basketball_woman   :weight_lifting_man: weight_lifting_man :weight_lifting_woman: weight_lifting_woman   :bicyclist: bicyclist biking_man :biking_woman: biking_woman   :mountain_bicyclist: mountain_bicyclist mountain_biking_man :mountain_biking_woman: mountain_biking_woman   :man_cartwheeling: man_cartwheeling :woman_cartwheeling: woman_cartwheeling   :men_wrestling: men_wrestling :women_wrestling: women_wrestling   :man_playing_water_polo: man_playing_water_polo :woman_playing_water_polo: woman_playing_water_polo   :man_playing_handball: man_playing_handball :woman_playing_handball: woman_playing_handball   :man_juggling: man_juggling :woman_juggling: woman_juggling    Person Resting    icon code icon code     :bath: bath :sleeping_bed: sleeping_bed    Family    icon code icon code     :two_women_holding_hands: two_women_holding_hands :couple: couple   :two_men_holding_hands: two_men_holding_hands :couplekiss_man_woman: couplekiss_man_woman   :couplekiss_man_man: couplekiss_man_man :couplekiss_woman_woman: couplekiss_woman_woman   :couple_with_heart: couple_with_heart couple_with_heart_woman_man :couple_with_heart_man_man: couple_with_heart_man_man   :couple_with_heart_woman_woman: couple_with_heart_woman_woman :family: family family_man_woman_boy   :family_man_woman_girl: family_man_woman_girl :family_man_woman_girl_boy: family_man_woman_girl_boy   :family_man_woman_boy_boy: family_man_woman_boy_boy :family_man_woman_girl_girl: family_man_woman_girl_girl   :family_man_man_boy: family_man_man_boy :family_man_man_girl: family_man_man_girl   :family_man_man_girl_boy: family_man_man_girl_boy :family_man_man_boy_boy: family_man_man_boy_boy   :family_man_man_girl_girl: family_man_man_girl_girl :family_woman_woman_boy: family_woman_woman_boy   :family_woman_woman_girl: family_woman_woman_girl :family_woman_woman_girl_boy: family_woman_woman_girl_boy   :family_woman_woman_boy_boy: family_woman_woman_boy_boy :family_woman_woman_girl_girl: family_woman_woman_girl_girl   :family_man_boy: family_man_boy :family_man_boy_boy: family_man_boy_boy   :family_man_girl: family_man_girl :family_man_girl_boy: family_man_girl_boy   :family_man_girl_girl: family_man_girl_girl :family_woman_boy: family_woman_boy   :family_woman_boy_boy: family_woman_boy_boy :family_woman_girl: family_woman_girl   :family_woman_girl_boy: family_woman_girl_boy :family_woman_girl_girl: family_woman_girl_girl    Person Symbol    icon code icon code     :speaking_head: speaking_head :bust_in_silhouette: bust_in_silhouette   :busts_in_silhouette: busts_in_silhouette :footprints: footprints    Animals \u0026amp; Nature Animal Mammal    icon code icon code     :monkey_face: monkey_face :monkey: monkey   :gorilla: gorilla :dog: dog   :dog2: dog2 :poodle: poodle   :wolf: wolf :fox_face: fox_face   :cat: cat :cat2: cat2   :lion: lion :tiger: tiger   :tiger2: tiger2 :leopard: leopard   :horse: horse :racehorse: racehorse   :unicorn: unicorn :deer: deer   :cow: cow :ox: ox   :water_buffalo: water_buffalo :cow2: cow2   :pig: pig :pig2: pig2   :boar: boar :pig_nose: pig_nose   :ram: ram :sheep: sheep   :goat: goat :dromedary_camel: dromedary_camel   :camel: camel :elephant: elephant   :rhinoceros: rhinoceros :mouse: mouse   :mouse2: mouse2 :rat: rat   :hamster: hamster :rabbit: rabbit   :rabbit2: rabbit2 :chipmunk: chipmunk   :bat: bat :bear: bear   :koala: koala :panda_face: panda_face   :feet: feet paw_prints      Animal Bird    icon code icon code     :turkey: turkey :chicken: chicken   :rooster: rooster :hatching_chick: hatching_chick   :baby_chick: baby_chick :hatched_chick: hatched_chick   :bird: bird :penguin: penguin   :dove: dove :eagle: eagle   :duck: duck :owl: owl    Animal Amphibian    icon code icon code     :frog: frog      Animal Reptile    icon code icon code     :crocodile: crocodile :turtle: turtle   :lizard: lizard :snake: snake   :dragon_face: dragon_face :dragon: dragon    Animal Marine    icon code icon code     :whale: whale :whale2: whale2   :dolphin: dolphin flipper :fish: fish   :tropical_fish: tropical_fish :blowfish: blowfish   :shark: shark :octopus: octopus   :shell: shell      Animal Bug    icon code icon code     :snail: snail :butterfly: butterfly   :bug: bug :ant: ant   :bee: bee honeybee :beetle: beetle   :spider: spider :spider_web: spider_web   :scorpion: scorpion      Plant Flower    icon code icon code     :bouquet: bouquet :cherry_blossom: cherry_blossom   :white_flower: white_flower :rosette: rosette   :rose: rose :wilted_flower: wilted_flower   :hibiscus: hibiscus :sunflower: sunflower   :blossom: blossom :tulip: tulip    Plant Other    icon code icon code     :seedling: seedling :evergreen_tree: evergreen_tree   :deciduous_tree: deciduous_tree :palm_tree: palm_tree   :cactus: cactus :ear_of_rice: ear_of_rice   :herb: herb :shamrock: shamrock   :four_leaf_clover: four_leaf_clover :maple_leaf: maple_leaf   :fallen_leaf: fallen_leaf :leaves: leaves    Food \u0026amp; Drink Food Fruit    icon code icon code     :grapes: grapes :melon: melon   :watermelon: watermelon :mandarin: mandarin orange tangerine   :lemon: lemon :banana: banana   :pineapple: pineapple :apple: apple   :green_apple: green_apple :pear: pear   :peach: peach :cherries: cherries   :strawberry: strawberry :kiwi_fruit: kiwi_fruit   :tomato: tomato      Food Vegetable    icon code icon code     :avocado: avocado :eggplant: eggplant   :potato: potato :carrot: carrot   :corn: corn :hot_pepper: hot_pepper   :cucumber: cucumber :mushroom: mushroom   :peanuts: peanuts :chestnut: chestnut    Food Prepared    icon code icon code     :bread: bread :croissant: croissant   :baguette_bread: baguette_bread :pancakes: pancakes   :cheese: cheese :meat_on_bone: meat_on_bone   :poultry_leg: poultry_leg :bacon: bacon   :hamburger: hamburger :fries: fries   :pizza: pizza :hotdog: hotdog   :taco: taco :burrito: burrito   :stuffed_flatbread: stuffed_flatbread :egg: egg   :fried_egg: fried_egg :shallow_pan_of_food: shallow_pan_of_food   :stew: stew :green_salad: green_salad   :popcorn: popcorn      Food Asian    icon code icon code     :bento: bento :rice_cracker: rice_cracker   :rice_ball: rice_ball :rice: rice   :curry: curry :ramen: ramen   :spaghetti: spaghetti :sweet_potato: sweet_potato   :oden: oden :sushi: sushi   :fried_shrimp: fried_shrimp :fish_cake: fish_cake   :dango: dango      Food Marine    icon code icon code     :crab: crab :shrimp: shrimp   :squid: squid      Food Sweet    icon code icon code     :icecream: icecream :shaved_ice: shaved_ice   :ice_cream: ice_cream :doughnut: doughnut   :cookie: cookie :birthday: birthday   :cake: cake :chocolate_bar: chocolate_bar   :candy: candy :lollipop: lollipop   :custard: custard :honey_pot: honey_pot    Drink    icon code icon code     :baby_bottle: baby_bottle :milk_glass: milk_glass   :coffee: coffee :tea: tea   :sake: sake :champagne: champagne   :wine_glass: wine_glass :cocktail: cocktail   :tropical_drink: tropical_drink :beer: beer   :beers: beers :clinking_glasses: clinking_glasses   :tumbler_glass: tumbler_glass      Dishware    icon code icon code     :plate_with_cutlery: plate_with_cutlery :fork_and_knife: fork_and_knife   :spoon: spoon :hocho: hocho knife   :amphora: amphora      Travel \u0026amp; Places Place Map    icon code icon code     :earth_africa: earth_africa :earth_americas: earth_americas   :earth_asia: earth_asia :globe_with_meridians: globe_with_meridians   :world_map: world_map :japan: japan    Place Geographic    icon code icon code     :mountain_snow: mountain_snow :mountain: mountain   :volcano: volcano :mount_fuji: mount_fuji   :camping: camping :beach_umbrella: beach_umbrella   :desert: desert :desert_island: desert_island   :national_park: national_park      Place Building    icon code icon code     :stadium: stadium :classical_building: classical_building   :building_construction: building_construction :houses: houses   :derelict_house: derelict_house :house: house   :house_with_garden: house_with_garden :office: office   :post_office: post_office :european_post_office: european_post_office   :hospital: hospital :bank: bank   :hotel: hotel :love_hotel: love_hotel   :convenience_store: convenience_store :school: school   :department_store: department_store :factory: factory   :japanese_castle: japanese_castle :european_castle: european_castle   :wedding: wedding :tokyo_tower: tokyo_tower   :statue_of_liberty: statue_of_liberty      Place Religious    icon code icon code     :church: church :mosque: mosque   :synagogue: synagogue :shinto_shrine: shinto_shrine   :kaaba: kaaba      Place Other    icon code icon code     :fountain: fountain :tent: tent   :foggy: foggy :night_with_stars: night_with_stars   :cityscape: cityscape :sunrise_over_mountains: sunrise_over_mountains   :sunrise: sunrise :city_sunset: city_sunset   :city_sunrise: city_sunrise :bridge_at_night: bridge_at_night   :hotsprings: hotsprings :carousel_horse: carousel_horse   :ferris_wheel: ferris_wheel :roller_coaster: roller_coaster   :barber: barber :circus_tent: circus_tent    Transport Ground    icon code icon code     :steam_locomotive: steam_locomotive :railway_car: railway_car   :bullettrain_side: bullettrain_side :bullettrain_front: bullettrain_front   :train2: train2 :metro: metro   :light_rail: light_rail :station: station   :tram: tram :monorail: monorail   :mountain_railway: mountain_railway :train: train   :bus: bus :oncoming_bus: oncoming_bus   :trolleybus: trolleybus :minibus: minibus   :ambulance: ambulance :fire_engine: fire_engine   :police_car: police_car :oncoming_police_car: oncoming_police_car   :taxi: taxi :oncoming_taxi: oncoming_taxi   :car: car red_car :oncoming_automobile: oncoming_automobile   :blue_car: blue_car :truck: truck   :articulated_lorry: articulated_lorry :tractor: tractor   :racing_car: racing_car :motorcycle: motorcycle   :motor_scooter: motor_scooter :bike: bike   :kick_scooter: kick_scooter :busstop: busstop   :motorway: motorway :railway_track: railway_track   :oil_drum: oil_drum :fuelpump: fuelpump   :rotating_light: rotating_light :traffic_light: traffic_light   :vertical_traffic_light: vertical_traffic_light :stop_sign: stop_sign   :construction: construction      Transport Water    icon code icon code     :anchor: anchor :boat: boat sailboat   :canoe: canoe :speedboat: speedboat   :passenger_ship: passenger_ship :ferry: ferry   :motor_boat: motor_boat :ship: ship    Transport Air    icon code icon code     :airplane: airplane :small_airplane: small_airplane   :flight_departure: flight_departure :flight_arrival: flight_arrival   :seat: seat :helicopter: helicopter   :suspension_railway: suspension_railway :mountain_cableway: mountain_cableway   :aerial_tramway: aerial_tramway :artificial_satellite: artificial_satellite   :rocket: rocket      Hotel    icon code icon code     :bellhop_bell: bellhop_bell      Time    icon code icon code     :hourglass: hourglass :hourglass_flowing_sand: hourglass_flowing_sand   :watch: watch :alarm_clock: alarm_clock   :stopwatch: stopwatch :timer_clock: timer_clock   :mantelpiece_clock: mantelpiece_clock :clock12: clock12   :clock1230: clock1230 :clock1: clock1   :clock130: clock130 :clock2: clock2   :clock230: clock230 :clock3: clock3   :clock330: clock330 :clock4: clock4   :clock430: clock430 :clock5: clock5   :clock530: clock530 :clock6: clock6   :clock630: clock630 :clock7: clock7   :clock730: clock730 :clock8: clock8   :clock830: clock830 :clock9: clock9   :clock930: clock930 :clock10: clock10   :clock1030: clock1030 :clock11: clock11   :clock1130: clock1130      Sky \u0026amp; Weather    icon code icon code     :new_moon: new_moon :waxing_crescent_moon: waxing_crescent_moon   :first_quarter_moon: first_quarter_moon :moon: moon waxing_gibbous_moon   :full_moon: full_moon :waning_gibbous_moon: waning_gibbous_moon   :last_quarter_moon: last_quarter_moon :waning_crescent_moon: waning_crescent_moon   :crescent_moon: crescent_moon :new_moon_with_face: new_moon_with_face   :first_quarter_moon_with_face: first_quarter_moon_with_face :last_quarter_moon_with_face: last_quarter_moon_with_face   :thermometer: thermometer :sunny: sunny   :full_moon_with_face: full_moon_with_face :sun_with_face: sun_with_face   :star: star :star2: star2   :stars: stars :milky_way: milky_way   :cloud: cloud :partly_sunny: partly_sunny   :cloud_with_lightning_and_rain: cloud_with_lightning_and_rain :sun_behind_small_cloud: sun_behind_small_cloud   :sun_behind_large_cloud: sun_behind_large_cloud :sun_behind_rain_cloud: sun_behind_rain_cloud   :cloud_with_rain: cloud_with_rain :cloud_with_snow: cloud_with_snow   :cloud_with_lightning: cloud_with_lightning :tornado: tornado   :fog: fog :wind_face: wind_face   :cyclone: cyclone :rainbow: rainbow   :closed_umbrella: closed_umbrella :open_umbrella: open_umbrella   :umbrella: umbrella :parasol_on_ground: parasol_on_ground   :zap: zap :snowflake: snowflake   :snowman_with_snow: snowman_with_snow :snowman: snowman   :comet: comet :fire: fire   :droplet: droplet :ocean: ocean    Activities Event    icon code icon code     :jack_o_lantern: jack_o_lantern :christmas_tree: christmas_tree   :fireworks: fireworks :sparkler: sparkler   :sparkles: sparkles :balloon: balloon   :tada: tada :confetti_ball: confetti_ball   :tanabata_tree: tanabata_tree :bamboo: bamboo   :dolls: dolls :flags: flags   :wind_chime: wind_chime :rice_scene: rice_scene   :ribbon: ribbon :gift: gift   :reminder_ribbon: reminder_ribbon :tickets: tickets   :ticket: ticket      Award Medal    icon code icon code     :medal_military: medal_military :trophy: trophy   :medal_sports: medal_sports :1st_place_medal: 1st_place_medal   :2nd_place_medal: 2nd_place_medal :3rd_place_medal: 3rd_place_medal    Sport    icon code icon code     :soccer: soccer :baseball: baseball   :basketball: basketball :volleyball: volleyball   :football: football :rugby_football: rugby_football   :tennis: tennis :bowling: bowling   :cricket: cricket :field_hockey: field_hockey   :ice_hockey: ice_hockey :ping_pong: ping_pong   :badminton: badminton :boxing_glove: boxing_glove   :martial_arts_uniform: martial_arts_uniform :goal_net: goal_net   :golf: golf :ice_skate: ice_skate   :fishing_pole_and_fish: fishing_pole_and_fish :running_shirt_with_sash: running_shirt_with_sash   :ski: ski      Game    icon code icon code     :dart: dart :8ball: 8ball   :crystal_ball: crystal_ball :video_game: video_game   :joystick: joystick :slot_machine: slot_machine   :game_die: game_die :spades: spades   :hearts: hearts :diamonds: diamonds   :clubs: clubs :black_joker: black_joker   :mahjong: mahjong :flower_playing_cards: flower_playing_cards    Arts \u0026amp; Crafts    icon code icon code     :performing_arts: performing_arts :framed_picture: framed_picture   :art: art      Objects Clothing    icon code icon code     :eyeglasses: eyeglasses :dark_sunglasses: dark_sunglasses   :necktie: necktie :shirt: shirt tshirt   :jeans: jeans :dress: dress   :kimono: kimono :bikini: bikini   :womans_clothes: womans_clothes :purse: purse   :handbag: handbag :pouch: pouch   :shopping: shopping :school_satchel: school_satchel   :mans_shoe: mans_shoe shoe :athletic_shoe: athletic_shoe   :high_heel: high_heel :sandal: sandal   :boot: boot :crown: crown   :womans_hat: womans_hat :tophat: tophat   :mortar_board: mortar_board :rescue_worker_helmet: rescue_worker_helmet   :prayer_beads: prayer_beads :lipstick: lipstick   :ring: ring :gem: gem    Sound    icon code icon code     :mute: mute :speaker: speaker   :sound: sound :loud_sound: loud_sound   :loudspeaker: loudspeaker :mega: mega   :postal_horn: postal_horn :bell: bell   :no_bell: no_bell      Music    icon code icon code     :musical_score: musical_score :musical_note: musical_note   :notes: notes :studio_microphone: studio_microphone   :level_slider: level_slider :control_knobs: control_knobs   :microphone: microphone :headphones: headphones   :radio: radio      Musical Instrument    icon code icon code     :saxophone: saxophone :guitar: guitar   :musical_keyboard: musical_keyboard :trumpet: trumpet   :violin: violin :drum: drum    Phone    icon code icon code     :iphone: iphone :calling: calling   :phone: phone telephone :telephone_receiver: telephone_receiver   :pager: pager :fax: fax    Computer    icon code icon code     :battery: battery :electric_plug: electric_plug   :computer: computer :desktop_computer: desktop_computer   :printer: printer :keyboard: keyboard   :computer_mouse: computer_mouse :trackball: trackball   :minidisc: minidisc :floppy_disk: floppy_disk   :cd: cd :dvd: dvd    Light \u0026amp; Video    icon code icon code     :movie_camera: movie_camera :film_strip: film_strip   :film_projector: film_projector :clapper: clapper   :tv: tv :camera: camera   :camera_flash: camera_flash :video_camera: video_camera   :vhs: vhs :mag: mag   :mag_right: mag_right :candle: candle   :bulb: bulb :flashlight: flashlight   :izakaya_lantern: izakaya_lantern lantern      Book Paper    icon code icon code     :notebook_with_decorative_cover: notebook_with_decorative_cover :closed_book: closed_book   :book: book open_book :green_book: green_book   :blue_book: blue_book :orange_book: orange_book   :books: books :notebook: notebook   :ledger: ledger :page_with_curl: page_with_curl   :scroll: scroll :page_facing_up: page_facing_up   :newspaper: newspaper :newspaper_roll: newspaper_roll   :bookmark_tabs: bookmark_tabs :bookmark: bookmark   :label: label      Money    icon code icon code     :moneybag: moneybag :yen: yen   :dollar: dollar :euro: euro   :pound: pound :money_with_wings: money_with_wings   :credit_card: credit_card :chart: chart    Mail    icon code icon code     :email: email envelope :e-mail: :e-mail:   :incoming_envelope: incoming_envelope :envelope_with_arrow: envelope_with_arrow   :outbox_tray: outbox_tray :inbox_tray: inbox_tray   :package: package :mailbox: mailbox   :mailbox_closed: mailbox_closed :mailbox_with_mail: mailbox_with_mail   :mailbox_with_no_mail: mailbox_with_no_mail :postbox: postbox   :ballot_box: ballot_box      Writing    icon code icon code     :pencil2: pencil2 :black_nib: black_nib   :fountain_pen: fountain_pen :pen: pen   :paintbrush: paintbrush :crayon: crayon   :memo: memo pencil      Office    icon code icon code     :briefcase: briefcase :file_folder: file_folder   :open_file_folder: open_file_folder :card_index_dividers: card_index_dividers   :date: date :calendar: calendar   :spiral_notepad: spiral_notepad :spiral_calendar: spiral_calendar   :card_index: card_index :chart_with_upwards_trend: chart_with_upwards_trend   :chart_with_downwards_trend: chart_with_downwards_trend :bar_chart: bar_chart   :clipboard: clipboard :pushpin: pushpin   :round_pushpin: round_pushpin :paperclip: paperclip   :paperclips: paperclips :straight_ruler: straight_ruler   :triangular_ruler: triangular_ruler :scissors: scissors   :card_file_box: card_file_box :file_cabinet: file_cabinet   :wastebasket: wastebasket      Lock    icon code icon code     :lock: lock :unlock: unlock   :lock_with_ink_pen: lock_with_ink_pen :closed_lock_with_key: closed_lock_with_key   :key: key :old_key: old_key    Tool    icon code icon code     :hammer: hammer :pick: pick   :hammer_and_pick: hammer_and_pick :hammer_and_wrench: hammer_and_wrench   :dagger: dagger :crossed_swords: crossed_swords   :gun: gun :bow_and_arrow: bow_and_arrow   :shield: shield :wrench: wrench   :nut_and_bolt: nut_and_bolt :gear: gear   :clamp: clamp :balance_scale: balance_scale   :link: link :chains: chains    Science    icon code icon code     :alembic: alembic :microscope: microscope   :telescope: telescope :satellite: satellite    Medical    icon code icon code     :syringe: syringe :pill: pill    Household    icon code icon code     :door: door :bed: bed   :couch_and_lamp: couch_and_lamp :toilet: toilet   :shower: shower :bathtub: bathtub   :shopping_cart: shopping_cart      Other Object    icon code icon code     :smoking: smoking :coffin: coffin   :funeral_urn: funeral_urn :moyai: moyai    Symbols Transport Sign    icon code icon code     :atm: atm :put_litter_in_its_place: put_litter_in_its_place   :potable_water: potable_water :wheelchair: wheelchair   :mens: mens :womens: womens   :restroom: restroom :baby_symbol: baby_symbol   :wc: wc :passport_control: passport_control   :customs: customs :baggage_claim: baggage_claim   :left_luggage: left_luggage      Warning    icon code icon code     :warning: warning :children_crossing: children_crossing   :no_entry: no_entry :no_entry_sign: no_entry_sign   :no_bicycles: no_bicycles :no_smoking: no_smoking   :do_not_litter: do_not_litter :non-potable_water: :non-potable_water:   :no_pedestrians: no_pedestrians :no_mobile_phones: no_mobile_phones   :underage: underage :radioactive: radioactive   :biohazard: biohazard      Arrow    icon code icon code     :arrow_up: arrow_up :arrow_upper_right: arrow_upper_right   :arrow_right: arrow_right :arrow_lower_right: arrow_lower_right   :arrow_down: arrow_down :arrow_lower_left: arrow_lower_left   :arrow_left: arrow_left :arrow_upper_left: arrow_upper_left   :arrow_up_down: arrow_up_down :left_right_arrow: left_right_arrow   :leftwards_arrow_with_hook: leftwards_arrow_with_hook :arrow_right_hook: arrow_right_hook   :arrow_heading_up: arrow_heading_up :arrow_heading_down: arrow_heading_down   :arrows_clockwise: arrows_clockwise :arrows_counterclockwise: arrows_counterclockwise   :back: back :end: end   :on: on :soon: soon   :top: top      Religion    icon code icon code     :place_of_worship: place_of_worship :atom_symbol: atom_symbol   :om: om :star_of_david: star_of_david   :wheel_of_dharma: wheel_of_dharma :yin_yang: yin_yang   :latin_cross: latin_cross :orthodox_cross: orthodox_cross   :star_and_crescent: star_and_crescent :peace_symbol: peace_symbol   :menorah: menorah :six_pointed_star: six_pointed_star    Zodiac    icon code icon code     :aries: aries :taurus: taurus   :gemini: gemini :cancer: cancer   :leo: leo :virgo: virgo   :libra: libra :scorpius: scorpius   :sagittarius: sagittarius :capricorn: capricorn   :aquarius: aquarius :pisces: pisces   :ophiuchus: ophiuchus      Av Symbol    icon code icon code     :twisted_rightwards_arrows: twisted_rightwards_arrows :repeat: repeat   :repeat_one: repeat_one :arrow_forward: arrow_forward   :fast_forward: fast_forward :next_track_button: next_track_button   :play_or_pause_button: play_or_pause_button :arrow_backward: arrow_backward   :rewind: rewind :previous_track_button: previous_track_button   :arrow_up_small: arrow_up_small :arrow_double_up: arrow_double_up   :arrow_down_small: arrow_down_small :arrow_double_down: arrow_double_down   :pause_button: pause_button :stop_button: stop_button   :record_button: record_button :cinema: cinema   :low_brightness: low_brightness :high_brightness: high_brightness   :signal_strength: signal_strength :vibration_mode: vibration_mode   :mobile_phone_off: mobile_phone_off      Math    icon code icon code     :heavy_multiplication_x: heavy_multiplication_x :heavy_plus_sign: heavy_plus_sign   :heavy_minus_sign: heavy_minus_sign :heavy_division_sign: heavy_division_sign    Punctuation    icon code icon code     :bangbang: bangbang :interrobang: interrobang   :question: question :grey_question: grey_question   :grey_exclamation: grey_exclamation :exclamation: exclamation heavy_exclamation_mark   :wavy_dash: wavy_dash      Currency    icon code icon code     :currency_exchange: currency_exchange :heavy_dollar_sign: heavy_dollar_sign    Keycap    icon code icon code     :hash: hash :asterisk: asterisk   :zero: zero :one: one   :two: two :three: three   :four: four :five: five   :six: six :seven: seven   :eight: eight :nine: nine   :keycap_ten: keycap_ten      Alphabet    icon code icon code     :capital_abcd: capital_abcd :abcd: abcd   :1234: 1234 :symbols: symbols   :abc: abc :a: a   :ab: ab :b: b   :cl: cl :cool: cool   :free: free :information_source: information_source   :id: id :m: m   :new: new :ng: ng   :o2: o2 :ok: ok   :parking: parking :sos: sos   :up: up :vs: vs   :koko: koko :sa: sa   :u6708: u6708 :u6709: u6709   :u6307: u6307 :ideograph_advantage: ideograph_advantage   :u5272: u5272 :u7121: u7121   :u7981: u7981 :accept: accept   :u7533: u7533 :u5408: u5408   :u7a7a: u7a7a :congratulations: congratulations   :secret: secret :u55b6: u55b6   :u6e80: u6e80      Geometric    icon code icon code     :red_circle: red_circle :large_blue_circle: large_blue_circle   :black_circle: black_circle :white_circle: white_circle   :black_large_square: black_large_square :white_large_square: white_large_square   :black_medium_square: black_medium_square :white_medium_square: white_medium_square   :black_medium_small_square: black_medium_small_square :white_medium_small_square: white_medium_small_square   :black_small_square: black_small_square :white_small_square: white_small_square   :large_orange_diamond: large_orange_diamond :large_blue_diamond: large_blue_diamond   :small_orange_diamond: small_orange_diamond :small_blue_diamond: small_blue_diamond   :small_red_triangle: small_red_triangle :small_red_triangle_down: small_red_triangle_down   :diamond_shape_with_a_dot_inside: diamond_shape_with_a_dot_inside :radio_button: radio_button   :white_square_button: white_square_button :black_square_button: black_square_button    Other Symbol    icon code icon code     :recycle: recycle :fleur_de_lis: fleur_de_lis   :trident: trident :name_badge: name_badge   :beginner: beginner :o: o   :white_check_mark: white_check_mark :ballot_box_with_check: ballot_box_with_check   :heavy_check_mark: heavy_check_mark :x: x   :negative_squared_cross_mark: negative_squared_cross_mark :curly_loop: curly_loop   :loop: loop :part_alternation_mark: part_alternation_mark   :eight_spoked_asterisk: eight_spoked_asterisk :eight_pointed_black_star: eight_pointed_black_star   :sparkle: sparkle :copyright: copyright   :registered: registered :tm: tm    Flags Common Flags    icon code icon code     :checkered_flag: checkered_flag :triangular_flag_on_post: triangular_flag_on_post   :crossed_flags: crossed_flags :black_flag: black_flag   :white_flag: white_flag :rainbow_flag: rainbow_flag    Country and Region Flags    icon code icon code     :andorra: andorra :united_arab_emirates: united_arab_emirates   :afghanistan: afghanistan :antigua_barbuda: antigua_barbuda   :anguilla: anguilla :albania: albania   :armenia: armenia :angola: angola   :antarctica: antarctica :argentina: argentina   :american_samoa: american_samoa :austria: austria   :australia: australia :aruba: aruba   :aland_islands: aland_islands :azerbaijan: azerbaijan   :bosnia_herzegovina: bosnia_herzegovina :barbados: barbados   :bangladesh: bangladesh :belgium: belgium   :burkina_faso: burkina_faso :bulgaria: bulgaria   :bahrain: bahrain :burundi: burundi   :benin: benin :st_barthelemy: st_barthelemy   :bermuda: bermuda :brunei: brunei   :bolivia: bolivia :caribbean_netherlands: caribbean_netherlands   :brazil: brazil :bahamas: bahamas   :bhutan: bhutan :botswana: botswana   :belarus: belarus :belize: belize   :canada: canada :cocos_islands: cocos_islands   :congo_kinshasa: congo_kinshasa :central_african_republic: central_african_republic   :congo_brazzaville: congo_brazzaville :switzerland: switzerland   :cote_divoire: cote_divoire :cook_islands: cook_islands   :chile: chile :cameroon: cameroon   :cn: cn :colombia: colombia   :costa_rica: costa_rica :cuba: cuba   :cape_verde: cape_verde :curacao: curacao   :christmas_island: christmas_island :cyprus: cyprus   :czech_republic: czech_republic :de: de   :djibouti: djibouti :denmark: denmark   :dominica: dominica :dominican_republic: dominican_republic   :algeria: algeria :ecuador: ecuador   :estonia: estonia :egypt: egypt   :western_sahara: western_sahara :eritrea: eritrea   :es: es :ethiopia: ethiopia   :eu: eu european_union :finland: finland   :fiji: fiji :falkland_islands: falkland_islands   :micronesia: micronesia :faroe_islands: faroe_islands   :fr: fr :gabon: gabon   :gb: gb uk :grenada: grenada   :georgia: georgia :french_guiana: french_guiana   :guernsey: guernsey :ghana: ghana   :gibraltar: gibraltar :greenland: greenland   :gambia: gambia :guinea: guinea   :guadeloupe: guadeloupe :equatorial_guinea: equatorial_guinea   :greece: greece :south_georgia_south_sandwich_islands: south_georgia_south_sandwich_islands   :guatemala: guatemala :guam: guam   :guinea_bissau: guinea_bissau :guyana: guyana   :hong_kong: hong_kong :honduras: honduras   :croatia: croatia :haiti: haiti   :hungary: hungary :canary_islands: canary_islands   :indonesia: indonesia :ireland: ireland   :israel: israel :isle_of_man: isle_of_man   :india: india :british_indian_ocean_territory: british_indian_ocean_territory   :iraq: iraq :iran: iran   :iceland: iceland :it: it   :jersey: jersey :jamaica: jamaica   :jordan: jordan :jp: jp   :kenya: kenya :kyrgyzstan: kyrgyzstan   :cambodia: cambodia :kiribati: kiribati   :comoros: comoros :st_kitts_nevis: st_kitts_nevis   :north_korea: north_korea :kr: kr   :kuwait: kuwait :cayman_islands: cayman_islands   :kazakhstan: kazakhstan :laos: laos   :lebanon: lebanon :st_lucia: st_lucia   :liechtenstein: liechtenstein :sri_lanka: sri_lanka   :liberia: liberia :lesotho: lesotho   :lithuania: lithuania :luxembourg: luxembourg   :latvia: latvia :libya: libya   :morocco: morocco :monaco: monaco   :moldova: moldova :montenegro: montenegro   :madagascar: madagascar :marshall_islands: marshall_islands   :macedonia: macedonia :mali: mali   :myanmar: myanmar :mongolia: mongolia   :macau: macau :northern_mariana_islands: northern_mariana_islands   :martinique: martinique :mauritania: mauritania   :montserrat: montserrat :malta: malta   :mauritius: mauritius :maldives: maldives   :malawi: malawi :mexico: mexico   :malaysia: malaysia :mozambique: mozambique   :namibia: namibia :new_caledonia: new_caledonia   :niger: niger :norfolk_island: norfolk_island   :nigeria: nigeria :nicaragua: nicaragua   :netherlands: netherlands :norway: norway   :nepal: nepal :nauru: nauru   :niue: niue :new_zealand: new_zealand   :oman: oman :panama: panama   :peru: peru :french_polynesia: french_polynesia   :papua_new_guinea: papua_new_guinea :philippines: philippines   :pakistan: pakistan :poland: poland   :st_pierre_miquelon: st_pierre_miquelon :pitcairn_islands: pitcairn_islands   :puerto_rico: puerto_rico :palestinian_territories: palestinian_territories   :portugal: portugal :palau: palau   :paraguay: paraguay :qatar: qatar   :reunion: reunion :romania: romania   :serbia: serbia :ru: ru   :rwanda: rwanda :saudi_arabia: saudi_arabia   :solomon_islands: solomon_islands :seychelles: seychelles   :sudan: sudan :sweden: sweden   :singapore: singapore :st_helena: st_helena   :slovenia: slovenia :slovakia: slovakia   :sierra_leone: sierra_leone :san_marino: san_marino   :senegal: senegal :somalia: somalia   :suriname: suriname :south_sudan: south_sudan   :sao_tome_principe: sao_tome_principe :el_salvador: el_salvador   :sint_maarten: sint_maarten :syria: syria   :swaziland: swaziland :turks_caicos_islands: turks_caicos_islands   :chad: chad :french_southern_territories: french_southern_territories   :togo: togo :thailand: thailand   :tajikistan: tajikistan :tokelau: tokelau   :timor_leste: timor_leste :turkmenistan: turkmenistan   :tunisia: tunisia :tonga: tonga   :tr: tr :trinidad_tobago: trinidad_tobago   :tuvalu: tuvalu :taiwan: taiwan   :tanzania: tanzania :ukraine: ukraine   :uganda: uganda :us: us   :uruguay: uruguay :uzbekistan: uzbekistan   :vatican_city: vatican_city :st_vincent_grenadines: st_vincent_grenadines   :venezuela: venezuela :british_virgin_islands: british_virgin_islands   :us_virgin_islands: us_virgin_islands :vietnam: vietnam   :vanuatu: vanuatu :wallis_futuna: wallis_futuna   :samoa: samoa :kosovo: kosovo   :yemen: yemen :mayotte: mayotte   :south_africa: south_africa :zambia: zambia   :zimbabwe: zimbabwe      ","permalink":"http://localhost:1313/posts/emoji-support/","summary":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site configuration and then you can type emoji shorthand codes directly in content files.\nThese begin and end with a colon and include the code of an emoji:\nGone camping! {?:}tent: Be back soon. That is so funny!","title":"Emoji Support"},{"content":"Photo by John Cafazza on Unsplash\nAt Parallax, we depend on many external services. Some of these services are things that we use internally for development like LaunchDarkly or GitHub. Others are services that our customers depend on for their business like HubSpot.\n Did you know many SaaS providers have webpages dedicated to publishing current status of their service(s)? If you’re an engineer, I’m sure you’ve stumbled on to a status page or two trying to figure out why something wasn’t working.\nAt Parallax, we were tired of having to look for a status page when we thought something might be wrong. We wanted to be able to be proactive. We wanted to be able to have alerts come to us. As opposed to tracking down alerts after we heard something might be wrong.\nIn order to solve this problem, I was preparing to build an app. It would be a fun little side project. As luck would have it, I didn’t need to. I discovered we could get most of what we wanted by using Slack and a single slash command!\nStatus Pages Before we dive into the nuts and bolts, let’s first start with what is a status page?\nI mentioned in the introduction that many SaaS providers publish status pages.\nGitHub Status\nhttps://www.githubstatus.com/\nLaunchDarkly Status\nhttps://status.launchdarkly.com/\nHubSpot Status\nhttps://status.hubspot.com/\nStatus pages follow a similar format. They show current status of major features of their service(s). Some will have another page for incident history or even history of individual components.\nFinding a status page, if one exists, is as easy as searching by the provider name and the keyword status.\nSlack and Slash Commands Slack is an über popular messaging app. We use it internally at Parallax, and I use it personally with several other groups I’m involved with.\nSlack also provides a feature called slash commands. What are slash commands? Slack describes them this way:\n Slash Commands allow users to invoke your app by typing a string into the message composer box.\n A slash command can be something fun like \\giphy alrighty then, which is used to find and post an image from the internet related to the words _“alrighty then” (_you can imagine what we’re looking for here). Or this could be something more serious like \\hangout, which will create a new Google Hangout and post the meeting link wherever the command was originally run.\nSlack has many built in slash commands available right out of the box, for free.\nPhoto by Solaiman Hossen on Unsplash\nConnect Slack To Status Pages Now that we’ve covered the basics, let’s get down to the business of how this actually works. What I’m about to cover is what we’ve done at Parallax. This is simply an approach that has worked for us. Your mileage may vary.\nCreate a New Channel First we need to create a new channel. We are going to need a place to house alerts from our providers, a new channel is a great place to put them all.\nThis keeps them in one place and allows for better notification management. Because it’s a channel it means others can join if they want to. It also means you can tag people that should know when something happens.\nFind a Status Feed — GitHub GitHub is a great first example of a status feed. Their status page provides a lot of things you will see on other status pages; a way to subscribe to status updates.\nYou can subscribe to updates via several different means vehicles. However, what we are after is the RSS feed.\ngithubstatus.com — history.rss\nAs you can see above, we end up with a url to an RSS feed for githubstatus.com: https://www.githubstatus.com/history.rss.\nFind a Status Feed — HubSpot Most status pages are going to look like the GitHub status page. They will usually have a way to subscribe to updates and RSS is typically one of the options.\nThere are some status pages that have an RSS feed available, but you have to search around a bit to find it. HubSpot is a great example of this. HubSpot has a wonderful status page. Subscribing to a feed, though, isn’t exactly obvious.\nIf you navigate to the HubSpot status page you won’t see any options for subscribing, even if you click Past Incidents. You’ll see a history of events, but again no subscribe option.\nDid you notice the url? /history. What happens if you add .rss at the end of that url?\nhttps://status.hubspot.com/history.rss\nBingo!\nYou will find status pages that have a history page, typically also publish that url as RSS feed that you can get to by adding .rss.\nAdd The Feed To Slack This is where the magic happens.\nRemember how we talked about Slack slash commands? We’re going to use one now. In order to follow along, you will need a status page RSS url and Slack.\nFirst, navigate to your new channel in Slack.\nThen, in the message bar at the bottom, type.\n/feed subscribe RSS_FEED_URL where RSS_FEED_URL is the status feed you wish to subscribe to.\nUse slack to subscribe to RSS status page feeds\nThats all there is to it!\nYou have now subscribed to an RSS feed. Slack will automatically poll for new updates on that feed. And, depending on your notifications settings, will trigger a new message popup when a new event is triggered on any of the feeds you’re subscribed to.\nPretty cool, huh?\nAt any point you can list the feeds you have subscribed to via the /feed list command\nlist of status rss feed subscriptions using slack `/feed list`\nCool Trick, Why Should I Care? This does a few things for us, some of which I’ve mentioned already. This gives us a built-in way to manage status of multiple external integrations. We get to leverage Slack’s notification system and built-in subscription system for free to do the work of checking RSS feeds for updates. When there is an issue of note, we have an easy place to thread messages and built in links (from the RSS feed) to more information.\nI’ll give you an example. Remember the Great Facebook Outage from October of 2021? Well, we started seeing things popping up and that put us on high alert.\nConclusion Consolidating status feeds to a single Slack channel, and letting Slack do all the hard work has made it easier for us to be proactive instead of reactive. Issue warnings come to us and we no longer have to track them down.\n References  https://www.getparallax.com/ https://launchdarkly.com/ https://www.hubspot.com/ https://github.com/ https://slack.com/ https://api.slack.com/interactivity/slash-commands https://www.githubstatus.com/ https://status.launchdarkly.com/ https://status.hubspot.com/ https://hangouts.google.com/ https://slack.com/help/articles/201259356-Slash-commands-in-Slack https://slack.com/help/articles/201402297-Create-a-channel https://engineering.fb.com/2021/10/04/networking-traffic/outage/  ","permalink":"http://localhost:1313/posts/have-slack-tell-you-when-external-services-hiccup/","summary":"Photo by John Cafazza on Unsplash\nAt Parallax, we depend on many external services. Some of these services are things that we use internally for development like LaunchDarkly or GitHub. Others are services that our customers depend on for their business like HubSpot.\n Did you know many SaaS providers have webpages dedicated to publishing current status of their service(s)? If you’re an engineer, I’m sure you’ve stumbled on to a status page or two trying to figure out why something wasn’t working.","title":"Have Slack Tell You When External Services Hiccup"},{"content":"Photo by Andrew Neel on Unsplash\nDo you find yourself tinkering with something new? Do you find yourself working on some cool new idea in your free time?\nYeah, me too.\nDo you keep track of what you want to work on next? You are keeping track of the work, right?\n Over the years I have worked on many personal projects. I’m a builder and I like to build things. I also have two young children. So when I have some time to work on my projects, I don’t want to spend time remembering what the heck I wanted to work on. I want to jump right in and get working right away.\nWrite It Down! Someone told me once:\n Ideas come and go. Write down your ideas and remove the need to remember them.\n Writing things down makes it much easier to focus on the work. When you start, you don’t have to spend time remembering what to work on. It’s so much easier to finish work when you know what that work actually is.\nI have found success when I run my personal projects more like a Project Manager. Where I take time to write out bits of work, setup segments of work (sprints, if you will 😉), and estimate that work. This way I am able to do the work more efficiently. Not only that, I have a place to practice estimation, scoping, delivery and other things I do during my day job.\nPhoto by Elizaveta Dushechkina on Unsplash\nWhere Do I Start? I will start by saying I don’t do all this for every project. Sometimes it doesn’t make sense. I’m working on something small, I’m messing around, or it’s a thing that I know won’t live long, etc.\nHowever, for the more involved projects, these are the things I do to keep it running smoothly.\n Version Control  Put your project in version control!\n I start every project the same way: I use Git. This was a habit I really started to practice after going through The Ruby On Rails Tutorial (by Michael Hartl) a couple times, back in the early 2010’s. I was still pretty new to git, so it was good practice to continue doing it.\nYou should always practice good habits, even with personal projects. We use version control in our work, we should use it in our own projects too. This has the added benefit of proving a sandbox to play in. It’s way less risky to play with git on a personal project.\nThis doesn’t mean I always push to a remote. It does mean each project I’m working on is ready to be pushed to a remote if I decide to do that at some point in the future.\nRemote Repository  Create a remote git repository\n This could be with any number of the available Git providers: Github, Gitlab, Azure Repos, etc.\nI usually go with Github or Gitlab, but the choice here isn’t so much about git. The choice here is about other features available like issues, projects, CI/CD options, registries, etc.\nIssues  Use issues management to keep track of tasks\n Most remote git services like Github or Gitlab support some form of issue management. This is extremely useful for popular projects because it provides a place for users to call out bugs or request new features.\nGitHub Issues\nGitlab Issues\nFor your own projects, you can use these too! It’s a great way to organize work. You start this phase by writing things down. Thats it, you don’t need to add labels or effort or anything like that. Just write it down!\nYou can take this one step further by adding labels like Bug or Feature or Enhancement, etc.\nhttps://github.com/n8rzz/chess-stats/issues\nThis provides something to build on. If you’re using only titles, thats cool, you now have a todo list. If you’re using labels, even better because now you can easily group work. Most of the time I try to keep things simple. I use each issue to store links related to a topic.\nhttps://github.com/n8rzz/chess-stats/issues/30\nSometimes I use checkboxes to build a list of things to do for a single feature or bug.\nhttps://github.com/n8rzz/chess-stats/issues/26\nYour goal should be to leverage issues for information storage. Use issues to store ideas, bugs, and any pertinent information related to each item.\nWrite it down.\nOnce it is written down you no longer need to remember it.\nIssue Management  Use tools to manage groups of issues and sequence work\n If you’ve made it this far you have a remote git repository and a list of issues related to your project. These issues might be bugs, ideas for features, or enhancements, or possibly just notes. We have a new problem, though; How and when do we do all this work?\nWell, with Github you can use Github Projects.\nGithub issues — https://github.com/features/issues/\nGitlab has something similar called Boards.\nGitlab Boards — https://gitlab.com/gitlab-org/gitlab/-/boards\nBoth are excellent ways to manage larger efforts. This could be as simple creating groups of items to tackle over a long weekend, to something as complex as assigning work for a large team.\n Github and Gitlab didn’t always have Projects or Boards. So, naturally, there are open-source alternatives out there too. Personally, I’ve had great luck with one called Zube. We use Zube on OpenScope and it’s awesome!\nzube.io\nZube allows you to create higher level groupings of issues like Epics and Releases. There are a whole host of features that can help super-charge your development planning.\nAt the end of the day, all of these options are simply another layer on top of issues. As long as you create issues, you can leverage any of these options to plan tactically.\n There are two applications I have not mentioned here: Jira and Azure Devops. I wouldn’t recommend either for most personal projects. They are great systems, but both are complex and require a lot of setup. If our goal is to efficiently use our time by planning work, it makes little sense to spend that time planning how to plan. I’ll just say avoid Jira and Azure Devops for personal projects unless you know what you’re getting into.\n Conclusion Whew, you made it!\nWe talked about many different ways to manage a personal project. We start small and each step builds on the last. We establish good habits from the beginning and continue to build on them as things get more complex.\nIf you remember anything from this article I’d like it to be this:\n Establish good habits that build on the previous good habits\n This goes back to the age-old phrase: Baby Steps. As long as you’re moving in the right direction, even if it’s slowly, you’re going to improve.\n Photo by Cesar Carlevarino Aragon on Unsplash\nReferences Tools\nWe covered quite a few tools in this article. Here is a quick recap.\nRemote Git Repositories and basic Issue Tracking\n Github Gitlab  Project Management Integrations\n Zube Jira Azure Devops  Links  https://medium.com/counterarts/tinker-with-purpose-9fb4f5a52459 https://git-scm.com/ https://github.com/ https://about.gitlab.com/ https://azure.microsoft.com/en-us/services/devops/repos/ https://github.com/features/issues/ https://docs.gitlab.com/ee/user/project/issues/ https://zube.io/ https://www.openscope.co/ https://zube.io/docs/components https://www.atlassian.com/software/jira https://azure.microsoft.com/en-us/services/devops/boards/ https://medium.com/counterarts/tinker-with-purpose-9fb4f5a52459  ","permalink":"http://localhost:1313/posts/how-i-manage-my-personal-projects/","summary":"Photo by Andrew Neel on Unsplash\nDo you find yourself tinkering with something new? Do you find yourself working on some cool new idea in your free time?\nYeah, me too.\nDo you keep track of what you want to work on next? You are keeping track of the work, right?\n Over the years I have worked on many personal projects. I’m a builder and I like to build things.","title":"How I Manage My Personal Projects"},{"content":"Photo by Jasmin Sessler on Unsplash\nYou made it past the interview and you signed the offer. You’re hired! Now you have a shiny new laptop in front of you and are about to take on the world of software engineering…\nRuh-roh! Now what?\nSoftware engineering is not like other jobs, this is a whole new world.\nWhen I landed my first engineering job, I had spent the previous 10 years in manufacturing. Like, driving a forklift and planning production runs. Getting a job as a software engineer was more than a little bit of a culture shock for me. If you’re fresh out of a boot camp, or entering the software game for the first time, it may be a culture shock for you too.\n Here are some things you should expect for your first year as a software engineer, and some tips to help make for a smooth ride.\nPhoto by Ana Municio on Unsplash\nWrite Things Down Keep a notebook nearby and use it. Write down the obvious important things like tasks and questions. A notebook is great for notes and ideas. You’ll notice over time your notes get better. You may find yourself referring back to them, too.\nI wrote about my experience with notes recently. I’m quite certain that getting into the habit of writing things down allowed me to get better faster. Writing things down allowed me to focus on the important things instead of remembering the important things.\nBaby Steps  Rome wasn’t built in a day.\n  The best way to build a brick wall is one brick at a time.\n These cliché quotes are tacky but true. When you are faced with a problem that seems insurmountable, the best way to tackle it is to break it down into smaller bits.\nTask: Build a login form\nBits\n Text and Password input Input Label Hint Text Submit Buttons Form Layout Api interactions Error State(s)  When you break work down into smaller parts, it’s less scary. You’ve worked with a text input before, how about a password input? You know how to build a basic layout, code that up first and get it working with the API first. Then plug in the styles and make it look right.\nBe Honest There will come a time when you will miss a deadline. You will probably know that you will miss the deadline long beforehand. Be honest with yourself and your team and speak up early.\nWhen a project manager asks how long something will take and you think it will be 2 weeks, tell them 3 weeks. Good project managers will add a buffer to your estimate. Other project managers will try to negotiate you down to 1 week. Don’t budge. If you think it’ll be 2 weeks say 3 weeks. Nobody wins by underestimating.\nLet’s imagine you find yourself reading the specs on a component you will be building. Those specs call out “… this should resemble a Finite State Machine…” . You don’t have the slightest idea of what a Finite State Machine is. Like any good engineer, first you Google it. Then, after you’ve read about it, ask someone to explain it in english.\nYou will feel uncomfortable. It’s ok. It’s ok to be vulnerable and it’s ok to be stubborn (with estimates).\nSet Expectations This is probably one of the most important items in this post.\nProperly setting expectations can save you, your team, and possibly even your project a lot of stress.\nWhat might that look like, exactly?\nSay you are tasked with building a feature that you said would take you a week. You were smart, and added a bit of extra space in that estimate, but still, it’s going to be close. On Wednesday (halfway through your one-week estimate), the designer and project manager ask if you can change the layout of the feature you’re working on.\nThe way that I approach this is thusly:\nFirst, I ask if this shift is critical to the feature. Second, assuming it is (cause it always is), I let everybody know that this will probably change the original estimate. Instead of finishing on Friday like we planned, this new work adds another two to three days, so now it won’t be finished until next Wednesday. Third, I ask if that change is still critical given the updated timeline.\nThat’s all there is to it. If scope changes so does timeline. Be vocal about it and make sure the correct stakeholders know about it.\nAsk Questions You will hear words you’ve never heard before. You will hear about concepts you’ve never heard before. You will be expected to know what you’re doing, unless you don’t.\n It’s ok to not know\n When you don’t know something, it’s ok. First, breathe. Second, speak up and ask someone. Hopefully, because you are a new engineer, you will have a mentor, project lead, or even a project manager who can answer your questions. Be respectful of people’s time, but also don’t stay stuck on something for too long.\nIt’s way better to ask questions early and move on to the next problem than it is to sit and spin your wheels for hours on end. Don’t do that. Ask early.\nPhoto by elizabeth lies on Unsplash\nSleep On It Our job as engineers is to solve problems. We do this all day long. Our brains are like a muscle, if it works too hard for too long it begins to tire out.\nYou will find yourself stuck on a problem at the end of the day. You will think you can push through it, and in some cases, you might. There will be some that you can’t push through. You know the best way to solve those problems?\nGo home and sleep.\nNine times out of ten you will have that problem solved within the first hour of the next day.\nWorks like a charm.\nPhoto by nikko macaspac on Unsplash\nAsk For Help When I first started, I thought my job was to know how to do everything assigned to me. I frequently didn’t know and it scared the crap out of me. It took me much longer than I’d like to admit to figure out that not knowing is actually part of the job. We get paid to figure things out.\nIf you find yourself stuck on a problem for more than an hour, ask for help. Before you do that, though, try the Rubber Duck method first. When you do ask for help, first be sure you know what your problem actually is. And be sure to have tried a few things first.\nIt’s probably something silly, but it might not be. Asking someone for help usually get you past whatever it is you’re stuck on.\nThe more seasoned engineers around you have lots of experience doing this, so it will look like they know everything. They don’t, but they know more than you. They are also way better at identifying what they don’t know, so they can surgically figure it out fast. Try to learn from them by watching how they work. You’ll be amazed and some day that will be you.\nImposter Syndrome Is Real (And Normal)  Imposter syndrome, also called perceived fraudulence, involves feelings of self-doubt and personal incompetence that persist despite your education, experience, and accomplishments\n One day, you will find yourself feeling as though you don’t belong. You’ll look around and think that everyone round you is way smarter than you. You’ll wonder how on earth were you lucky enough to get here? This is called Imposter Syndrome and it is a real thing. It can be debilitating.\nYou want to know a secret? Everybody gets imposter syndrome from time to time. When you start feeling like an imposter do not be troubled, that’s normal. It feels funny, sure, but still normal.\nBurnout Burnout is like staying awake for 48 hours straight and being so tired you can’t fall asleep. When you’ve reached burnout stage with coding, you will start to make simple mistakes and may become irritable.\nIf you’re anything like me, you might eat, sleep, and drink engineering. I’m extremely lucky in that I’ve been able to turn one of my hobbies into a career. For me, that means I code at work and code at night. Too much of that, though, can lead to burnout.\nThere are more classical ways to get to burnout, too, like 100 hour weeks to meet a deadline. Don’t do that.\nBurnout is something to watch out for. Be honest with yourself about if you are starting to feel burned out. If you’re lucky, you will have teammates looking out for you. They might tell you that you’re burned out before you even realize it.\nSide note: If you do find yourself on such a team, they’re keepers. A team that looks out for each other and is honest with each other about burnout is a solid team. Hold on to that as much as you can.\nRest is the only cure for burnout. Unplug and go to bed!\nConclusion Your first year as an engineer is going to be a wild ride. Don’t panic. Your first year is going to be filled with learning, trials and tribulations. When you come out the other side, you are going to be stronger than you ever thought possible!\n References  https://nategeslin.medium.com/what-i-look-for-when-i-hire-software-engineers-febf653aa95b https://rubberduckdebugging.com/ https://letmegooglethat.com/?q=finite+state+machine https://www.healthline.com/health/mental-health/imposter-syndrome https://www.healthline.com/health/tips-for-identifying-and-preventing-burnout  ","permalink":"http://localhost:1313/posts/your-first-year-as-a-software-engineer/","summary":"Photo by Jasmin Sessler on Unsplash\nYou made it past the interview and you signed the offer. You’re hired! Now you have a shiny new laptop in front of you and are about to take on the world of software engineering…\nRuh-roh! Now what?\nSoftware engineering is not like other jobs, this is a whole new world.\nWhen I landed my first engineering job, I had spent the previous 10 years in manufacturing.","title":"Your First Year As A Software Engineer"},{"content":"Over the years, I have had the pleasure of being a part of the hiring process. My experiences range from being a cog in the wheel of hiring for a massive corporation, and a primary decision-maker for a small start-up.\nWhat makes a good hire? It might not be what you think…\n Get Noticed The first step to getting hired at any job is to get noticed. That might be as simple as submitting an application. It might also be as complex as leaving a lasting impression on the CEO you happened to run into.\n Before one can interview they must make themselves known.\n This seems painfully obvious, I know, but it is true. Some companies receive hundreds or even thousands of applications. As an example, for the last round of hiring I did, we received over 80 applications. Our company is less than 40 employees and our dev team was less than 10 at the time.\nAt this stage, you must be a little more persistent. Make phone calls, send emails, stop in and get to know the person at the front desk. In a virtual world, you could follow the company and comment on their posts. You could also find people who work at that company, and maybe even interact with their posts too! Do whatever it takes to get an interview but be friendly, respectful, and courteous. You will be more likely to leave a good impression with someone who could put in a good word for you later. You must convince them that they do actually want to spend time interviewing you.\nYou will be more likely to leave a good impression on someone who could put in a good word for you later. You must convince them that they do actually want to spend time interviewing you.\nWhat I\u0026rsquo;m looking for Your qualifications will be the first thing I look at. What if you don\u0026rsquo;t have much for qualifications? Not to worry! This can be offset by persistence or examples of past work.\nA well-curated GitHub account (or any public git repository) can be a big plus, especially if your qualifications are light. I\u0026rsquo;ll usually look at a few of the most recent repos. What am I looking for exactly?\n what have you worked on recently? how do you write code? what language(s) do you use in your projects? what tools (if any) are you using on your projects? are there any comments? are they good comments? are there any tests? how is your code structured? is there a README and is it useful?  For me, a quality public git repository account can completely offset a weak resume.\nPhone Interview Depending on the job and the company doing the hiring, there may be a phone interview first. Consider this a pre-interview and is likely to be informal and somewhat short. Again, be friendly, respectful, and courteous. The goal here is to get a feel for candidates and see what sort of an attitude they have. Phone interviews rarely go into deep detail. Instead, the focus on work history and broad concepts.\nWhat I\u0026rsquo;m Looking For Communication. How well do you communicate using only language? Where are you when doing the phone interview?\nThese days, this stage may actually be a hangout or zoom or whatever, but the questions are the same. If it is a video call, my favorite thing to do is what the eyes and face to see how you respond to questioning. I\u0026rsquo;m also keeping an eye out for, and try to be respectful of, nerves.\nIt\u0026rsquo;s okay to be nervous. You know what you should do if you\u0026rsquo;re nervous? Say that you\u0026rsquo;re nervous. For me, seeing someone nervous during an interview means that you care and that you are not a robot.\nLastly, this call serves as a control for the Interview later on. I will be able to compare your attitude between the two interviews. I\u0026rsquo;ll also be able to compare your attitude between a relaxed situation and a more stressful one (the in-person interview).\nCode Challenge Personally, I am a fan of short, concise code challenges. It doesn\u0026rsquo;t need to be complicated, just enough to prove they can code and just enough to see how they code. Something small like designing an API for a React component, or setting up a data model for some API response. One thing I absolutely avoid here and in the following interview is anything related to algorithms. They are good to know, but not required knowledge for my team. This is where the process starts looking at more than \u0026ldquo;can an engineer engineer?\u0026rdquo; An important part of this phase, and this is on the hiring side, is the feedback. If I ask a candidate to do a code challenge, at the very least they will get feedback on the work. That may be in the form of an email or it may be as part of the next stage; an in-person interview. Either way, a candidate is getting some feedback!\nWhat I\u0026rsquo;m Looking For Did you complete the challenge successfully? I look for the same things here as do with the public repos (if available). The big items I look for here are correctness, code quality, planning, and structure.\nInterview Here we tie it all together. I\u0026rsquo;ll ask about your past experience, dev-related or not. We\u0026rsquo;ll make some small talk and I\u0026rsquo;ll probably ask you a few dry theory questions. If you\u0026rsquo;ve done a code challenge, we will spend a good amount of time going over that in-depth.\nWhether the challenge was completed successfully is not as important as you might think. For me, I like to use challenges as a shared reference. You\u0026rsquo;ve had a chance to solve a small problem in a controlled environment that I am familiar with. At the interview, I can ask you questions about why you solved it the way you did. I can offer you constructive criticism on something that could be improved. I can poke at various parts of your solution to see what you know about the code you wrote. I can challenge your assumptions. I can ask about your thought processes and how you went about planning to complete the challenge. You did plan, right?\nPass or fail, your work is almost done. You\u0026rsquo;ve worked hard to get to this point, you made a lasting impression, and that is awesome!\nWhat I\u0026rsquo;m Looking For This may come as a surprise but I\u0026rsquo;m not looking for correct answers to my questions. Correct answers are awesome, don\u0026rsquo;t get me wrong, but what I\u0026rsquo;m looking for here is how you handle this poking and criticism. Are you answering confidently? If not, I\u0026rsquo;m going to dig into that to figure out what you might know and what you do not. Are you able to acknowledge when you might not know something? This is the most important part of the entire exercise. It really isn\u0026rsquo;t what you know, it\u0026rsquo;s how you handle not knowing that is important to me here.\nJust as important, can you handle feedback and maybe even constructive criticism? Are you humble or arrogant? Are you vulnerable or defensive?\nThese are all important things to know about a person who will be joining a team. You see, I\u0026rsquo;m not just figuring out what you do and do not know, I\u0026rsquo;m figuring out if you will fit in the team. Attitude and effort are huge. Frankly, you can be fresh out of a Bootcamp, have zero qualifications, fail the challenge, and yet still get the job. If you can have a good attitude, handle feedback with grace, ask great questions, admit when you don\u0026rsquo;t know something, and want to learn, I want you on my team. Software development is a team sport. People who have a good attitude and put in the effort are what make the team work well.\nI can teach people to code. I can\u0026rsquo;t teach people to not be a d***.\nFollow Up! After the interview (or interviews), no matter the outcome, follow up! Send a thank you card, send a thank you email. Add the interviewer(s) on LinkedIn, etc. Show that you have an interest in the job. Even if you don\u0026rsquo;t get the job, memorable follow-ups can leave a positive lasting impression.\n Conclusion Interviewing can be stressful. You will improve your chances by being confident, humble, honest, courteous, and kind.\nAttitude and effort can completely offset a lack of qualifications or a failed code challenge. If you\u0026rsquo;re likable, and someone who works well with others, your chances are good.\nGood luck out there!\n","permalink":"http://localhost:1313/posts/what-i-look-for-when-i-hire-software-engineers/","summary":"Over the years, I have had the pleasure of being a part of the hiring process. My experiences range from being a cog in the wheel of hiring for a massive corporation, and a primary decision-maker for a small start-up.\nWhat makes a good hire? It might not be what you think…\n Get Noticed The first step to getting hired at any job is to get noticed. That might be as simple as submitting an application.","title":"What I Look for When I Hire Software Engineers"},{"content":"Heading 1 \u0026ldquo;Lorem ipsum dolor sit amet, consectetaur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\u0026rdquo;\nThis continues at length and variously. The text is not really Greek, but badly garbled Latin. It started life as extracted phrases from sections 1.10.32 and 1.10.33 of Cicero\u0026rsquo;s \u0026ldquo;De Finibus Bonorum et Malorum\u0026rdquo; (\u0026ldquo;The Extremes of Good and Evil\u0026rdquo;), which read:\nHeading 2 Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\nAt vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.\nHeading 3 \u0026ldquo;Lorem ipsum dolor sit amet, consectetaur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\u0026rdquo;\nThis continues at length and variously. The text is not really Greek, but badly garbled Latin. It started life as extracted phrases from sections 1.10.32 and 1.10.33 of Cicero\u0026rsquo;s \u0026ldquo;De Finibus Bonorum et Malorum\u0026rdquo; (\u0026ldquo;The Extremes of Good and Evil\u0026rdquo;), which read:\nSed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\nHeading 4 At ver \u0026ldquo;Lorem ipsum dolor sit amet, consectetaur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\u0026rdquo;\nThis continues at length and variously. The text is not really Greek, but badly garbled Latin. It started life as extracted phrases from sections 1.10.32 and 1.10.33 of Cicero\u0026rsquo;s \u0026ldquo;De Finibus Bonorum et Malorum\u0026rdquo; (\u0026ldquo;The Extremes of Good and Evil\u0026rdquo;), which read:\nSed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\nHeading 5 At ver \u0026ldquo;Lorem ipsum dolor sit amet, consectetaur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\u0026rdquo;\nThis continues at length and variously. The text is not really Greek, but badly garbled Latin. It started life as extracted phrases from sections 1.10.32 and 1.10.33 of Cicero\u0026rsquo;s \u0026ldquo;De Finibus Bonorum et Malorum\u0026rdquo; (\u0026ldquo;The Extremes of Good and Evil\u0026rdquo;), which read:\nSed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\nAt ver\n","permalink":"http://localhost:1313/posts/lorem-ipsum/","summary":"Heading 1 \u0026ldquo;Lorem ipsum dolor sit amet, consectetaur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.","title":"Lorem Ipsum"},{"content":"OpenScope Air Traffic Control Simulator\nFor several years, I was an active maintainer of a project called OpenScope. OpenScope is a browser-based air traffic control simulator driven by JavaScript, HTML canvas, and json. There is no back end, it’s all done in the browser. It’s also open source, anybody can contribute as long as you follow the guidelines and can speak aviation.\nProblem When I first started contributing to the project, there were issues with performance.\n Before I continue, let’s cover some basics.\nCanvas: The canvas API provides a way to draw graphics using javascript and the HTML canvas element.\nAnimate: to give (a movie, character, or drawing) the appearance of movement using animation techniques.\nAnimating in code is like drawing a flip book\nIn order for things to appear to move, they must be redrawn making only small changes. A collection of these small changes, drawing over time, make the appearance of movement.\nThis is the same concept only done with code instead of pen and paper.\nOne other thing of note here is that with code, between each frame (page), we must do math to calculate exactly where the next drawing should go.\nGame Loop:  The game loop is the overall flow control for the entire game program. It’s a loop because the game keeps doing a series of actions over and over again until the user quits. Each iteration of the game loop is known as a frame. Most real-time games update several times per second: 30 and 60 are the two most common intervals. If a game runs at 60 FPS (frames per second), this means that the game loop completes 60 iterations every second.\n — source: https://www.informit.com/articles/article.aspx?p=2167437\u0026amp;seqNum=2\nBrief Introduction To OpenScope UI Running a simulator of any kind requires animation. In order to animate with code, you need to have a Game Loop. In order to do that on a browser with javascript and in a performant way, you need to use requestAnimationFrame.\nWe draw a lot of things on the HTML canvas: Navaids, terrain, moving aircraft, text, aircraft routes, SIDs, STARs, runways, etc.\nOpenScope view with all the visualizations on: Navaids, Runways, Airport, SIDs, STARs, and a selected aircraft route\nAs you can see, there is a lot going on here. The menubar at the bottom and the flyout on the right are both html elements and not part of the canvas or the animation loop.\nPerformance Problem We continued to get reports of choppy animation, or computer fans whirring louder than normal after playing for a bit. So we decided to investigate.\nIt didn’t take long for us to discover we were doing too much between frames and were “dropping frames”. Dropping frames means that a calculation from one frame is carrying over to the next, meaning we don’t have enough time to render the next frame on time. Imagine taking random pages out of the flip book above, that’s a dropped frame.\nOne pass through the performance tab on Chrome and it was painfully obvious we were dropping a ton of frames.\nThe simple cause was we were doing too much between frames. Looking at the image above, I’m sure you can see why. Everything in that view needed to be redrawn between each frame.\n Up till this point in my career, I had touched the canvas api only twice. I’d never had a chance to dive deep into canvas problems before, so I was looking forward to this challenge.\nAfter some research, I discovered two things:\n The canvas element is an HTML element (duh) that can receive styles via css. Things like background-color and stuff. This seems obvious now, but was a bit of a revelation at the time. The canvas element can have a transparent background.  Stack The Canvases For this next realization, I don’t know if I saw this in an article or came up with myself. I’m not usually this clever, so lets say I read it somewhere.\nIf we could identify the elements that changed frequently and those that did not, we could better separate things to redraw only when needed. Furthermore, if we could make that determination, we could draw each on their own HTML canvas.\nWe could stack HTML canvases!\nBorrowing two terms from React shallowRender and deepRender to describe what each canvas would do, we got to work coding it up.\nWe broke renderable things up into two groups:\n Things that need to change every frame Things that need to change when the view changes (pan/zoom). Aircraft path, terrain, navaids, SIDS/STARS, airspace, etc.  It’s not a surprise that the expensive items are all part of the deepRender group. Only updating each of those when needed was the big breakthrough and really made a huge difference in performance.\nYou can see how we manage drawing to multiple HTML canvases here in the CanvasController.\nPhoto by Sandie Clarke on Unsplash\nConclusion The morals of this story are:\n HTML canvas elements can have a transparent background and can be stacked on top of each other only re-draw expensive items when you need to  See this code in action at OpenScope or visit our repo.\n References  https://www.openscope.co/ https://github.com/openscope/openscope/blob/develop/CONTRIBUTING.md https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API https://www.informit.com/articles/article.aspx?p=2167437\u0026amp;seqNum=2 http://isaacsukin.com/news/2015/01/detailed-explanation-javascript-game-loops-and-timing https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame https://github.com/openscope/openscope https://github.com/openscope/openscope/blob/develop/src/assets/scripts/client/canvas/CanvasController.js#L402  ","permalink":"http://localhost:1313/posts/why-we-use-layered-html-canvases-at-openscope/","summary":"OpenScope Air Traffic Control Simulator\nFor several years, I was an active maintainer of a project called OpenScope. OpenScope is a browser-based air traffic control simulator driven by JavaScript, HTML canvas, and json. There is no back end, it’s all done in the browser. It’s also open source, anybody can contribute as long as you follow the guidelines and can speak aviation.\nProblem When I first started contributing to the project, there were issues with performance.","title":"Why We Use Layered HTML Canvases At OpenScope"},{"content":"Photo by Clem Onojeghuo on Unsplash\nOver the years, I have had the pleasure of being a part of the hiring process. My experiences range from being a cog in the wheel of hiring for a massive corporation, and a primary decision-maker for a small start-up.\nWhat makes a good hire? It might not be what you think…\n Get Noticed The first step to getting hired at any job is to get noticed. That might be as simple as submitting an application. It might also be as complex as leaving a lasting impression on the CEO you happened to run into.\n Before one can interview they must make themselves known.\n This seems painfully obvious, I know, but it is true. Some companies receive hundreds or even thousands of applications. As an example, for the last round of hiring I did, we received over 80 applications. Our company is less than 40 employees and our dev team was less than 10 at the time.\nAt this stage, you must be a little more persistent. Make phone calls, send emails, stop in and get to know the person at the front desk. In a virtual world, you could follow the company and comment on their posts. You could also find people who work at that company, and maybe even interact with their posts too!\nDo whatever it takes to get an interview but be friendly, respectful, and courteous. You will be more likely to leave a good impression with someone who could put in a good word for you later. You must convince them that they do actually want to spend time interviewing you.\nYou will be more likely to leave a good impression on someone who could put in a good word for you later. You must convince them that they do actually want to spend time interviewing you.\nWhat I’m looking for Your qualifications will be the first thing I look at. What if you don’t have much for qualifications? Not to worry! This can be offset by persistence or examples of past work.\nA well-curated GitHub account (or any public git repository) can be a big plus, especially if your qualifications are light. I’ll usually look at a few of the most recent repos. What am I looking for exactly?\n what have you worked on recently? how do you write code? what language(s) do you use in your projects? what tools (if any) are you using on your projects? are there any comments? are they good comments? are there any tests? how is your code structured? is there a README and is it useful?  For me, a quality public git repository account can completely offset a weak resume.\nPhoto by Quino Al on Unsplash\nPhone Interview Depending on the job and the company doing the hiring, there may be a phone interview first. Consider this a pre-interview and is likely to be informal and somewhat short. Again, be friendly, respectful, and courteous. The goal here is to get a feel for candidates and see what sort of an attitude they have.\nPhone interviews rarely go into deep detail. Instead, the focus on work history and broad concepts.\nWhat I’m Looking For Communication. How well do you communicate using only language? Where are you when doing the phone interview?\nThese days, this stage may actually be a hangout or zoom or whatever, but the questions are the same. If it is a video call, my favorite thing to do is what the eyes and face to see how you respond to questioning. I’m also keeping an eye out for, and try to be respectful of, nerves.\nIt’s okay to be nervous. You know what you should do if you’re nervous? Say that you’re nervous. For me, seeing someone nervous during an interview means that you care and that you are not a robot.\nLastly, this call serves as a control for the Interview later on. I will be able to compare your attitude between the two interviews. I’ll also be able to compare your attitude between a relaxed situation and a more stressful one (the in-person interview).\nPhoto by Jukan Tateisi on Unsplash\nCode Challenge Personally, I am a fan of short, concise code challenges. It doesn’t need to be complicated, just enough to prove they can code and just enough to see how they code. Something small like designing an API for a React component, or setting up a data model for some API response.\nOne thing I absolutely avoid here and in the following interview is anything related to algorithms. They are good to know, but not required knowledge for my team.\nThis is where the process starts looking at more than “can an engineer engineer?” An important part of this phase, and this is on the hiring side, is the feedback. If I ask a candidate to do a code challenge, at the very least they will get feedback on the work. That may be in the form of an email or it may be as part of the next stage; an in-person interview.\nEither way, a candidate is getting some feedback!\nWhat I’m Looking For Did you complete the challenge successfully? I look for the same things here as do with the public repos (if available). The big items I look for here are correctness, code quality, planning, and structure.\nPhoto by Marten Newhall on Unsplash\nInterview Here we tie it all together. I’ll ask about your past experience, dev-related or not. We’ll make some small talk and I’ll probably ask you a few dry theory questions. If you’ve done a code challenge, we will spend a good amount of time going over that in-depth.\nWhether the challenge was completed successfully is not as important as you might think. For me, I like to use challenges as a shared reference. You’ve had a chance to solve a small problem in a controlled environment that I am familiar with. At the interview, I can ask you questions about why you solved it the way you did. I can offer you constructive criticism on something that could be improved. I can poke at various parts of your solution to see what you know about the code you wrote. I can challenge your assumptions. I can ask about your thought processes and how you went about planning to complete the challenge. You did plan, right?\nPass or fail, your work is almost done. You’ve worked hard to get to this point, you made a lasting impression, and that is awesome!\nWhat I’m Looking For This may come as a surprise but I’m not looking for correct answers to my questions. Correct answers are awesome, don’t get me wrong, but what I’m looking for here is how you handle this poking and criticism. Are you answering confidently? If not, I’m going to dig into that to figure out what you might know and what you do not. Are you able to acknowledge when you might not know something? This is the most important part of the entire exercise. It really isn’t what you know, it’s how you handle not knowing that is important to me here.\nJust as important, can you handle feedback and maybe even constructive criticism? Are you humble or arrogant? Are you vulnerable or defensive?\nThese are all important things to know about a person who will be joining a team. You see, I’m not just figuring out what you do and do not know, I’m figuring out if you will fit in the team. Attitude and effort are huge. Frankly, you can be fresh out of a Bootcamp, have zero qualifications, fail the challenge, and yet still get the job. If you can have a good attitude, handle feedback with grace, ask great questions, admit when you don’t know something, and want to learn, I want you on my team. Software development is a team sport. People who have a good attitude and put in the effort are what make the team work well.\nI can teach people to code. I can’t teach people to not be a d***.\nFollow Up! After the interview (or interviews), no matter the outcome, follow up! Send a thank you card, send a thank you email. Add the interviewer(s) on LinkedIn, etc. Show that you have an interest in the job.\nEven if you don’t get the job, memorable follow-ups can leave a positive lasting impression.\n Conclusion Interviewing can be stressful. You will improve your chances by being confident, humble, honest, courteous, and kind.\nAttitude and effort can completely offset a lack of qualifications or a failed code challenge. If you’re likable, and someone who works well with others, your chances are good.\nGood luck out there!\n","permalink":"http://localhost:1313/posts/what-i-look-for-when-i-hire-software-engineers-1/","summary":"Photo by Clem Onojeghuo on Unsplash\nOver the years, I have had the pleasure of being a part of the hiring process. My experiences range from being a cog in the wheel of hiring for a massive corporation, and a primary decision-maker for a small start-up.\nWhat makes a good hire? It might not be what you think…\n Get Noticed The first step to getting hired at any job is to get noticed.","title":"What I Look For When I Hire Software Engineers"},{"content":"Photo by Thought Catalog on Unsplash\nIt started like this: I was a young Software Engineer and I wrote things down. My mentor told me to write things down and that it was a great habit to get into.\n“Don’t write everything down”, he said, “just things that are important.”\nThat way I don’t have to burden myself with remembering everything, instead I can refer to my notebook. Most of these items were little notes about problems I would run into, but always forgot how to solve them. An example of an early note is something like this:\nThe first command will list all running processes on a PORT_NUMBER. The second will shutdown a process by PID that we found with the first command. This is handy for when a process doesn’t shut down correctly. Like if a terminal window is accidentally closed and your web server is still running.\n My notebook worked for a time, but that quickly became messy. It hard to get at if I left my notebook somewhere. It was messy, because I have horrible handwriting. And, finally, a handwritten notebook is not the best place for code snippets.\nI made a good habit of continuing to keep track of these little things, though, and over time my collection grew. It grew so much that I ended up moving my list to something a little more portable: A Github Gist.\nThis also worked for a little while. My note collection continued to grow and then the gist started to get messy and also was difficult to maintain.\nThere had to be a better way!\nPut It In a Book! My constant need for organization eventually got the best of me and I realized I needed to find a better method.\nI’m a software engineer, so I thought about building a blog. I snapped out of that nightmare and realized that was a terrible idea. It would be fun, sure, but I wanted something now. I didn’t have the patience to build something from scratch.\nPhoto by Sigmund on Unsplash\nOccasionally, while software engineering, I read documentation for APIs, software, or services. Around this time I began to notice some of them were using the same service: Gitbook.\nI hadn’t planned on writing a book but this isn’t really a book. More an organized collection of notes. I try to keep it free flowing, it shouldn’t be much more than a collection of notes organized by topic. Some topics be grow, and that is fine, but I should aim to keep things note-like.\ntiskbaf — Docker. An example of the gitbook that holds my notes\nI’ve taken to calling this book tiskbaf. Which stands for Things I Should Know But Always Forget.\nMoving to Gitbook proved to be a good next step. I feel like there is a better way to do this, though it is working well for me now. I continue to add to this as I come across things I’m always looking up. I find myself referring to this more than a few times a week. It has definitely been a useful tool!\nConclusion I find myself referencing this collection of notes almost daily. I love that is a living resource. I can edit when I need to, I can create new content, I can share it if I need to.\nIt’s clean and it’s simple.\nDo you keep notes? How do you manage them? I’d love to read about your solutions in the comments!\n References:  https://gist.github.com/ https://www.gitbook.com/  ","permalink":"http://localhost:1313/posts/i-created-a-book-for-my-notes-and-you-should-too/","summary":"Photo by Thought Catalog on Unsplash\nIt started like this: I was a young Software Engineer and I wrote things down. My mentor told me to write things down and that it was a great habit to get into.\n“Don’t write everything down”, he said, “just things that are important.”\nThat way I don’t have to burden myself with remembering everything, instead I can refer to my notebook. Most of these items were little notes about problems I would run into, but always forgot how to solve them.","title":"I Created a Book for My Notes and You Should Too!"},{"content":"Photo by Ben White on Unsplash\nProblem In software, naming is often said to be one of the hardest parts. From what I’ve seen, writing tests is right up there too! I see people struggle with tests all the time. They get overwhelmed or frustrated and just skip it, which is a bad thing for everybody.\nNaming is hard because developers are rarely given a guide to naming. Over time, they learn tips and tricks and develop strategies to make naming easier. The same can be said about testing.\nWhat follows is a strategy I like to use when writing tests. It’s one I’ve encouraged my team to use as well with great success.\n Prelude First, the strategies outlined here work with most languages. The examples below are presented in Javascript and the code examples assume Jest is the test library.\nSecond, this is not TDD. TDD is a whole other animal and beyond the scope of this article.\nThird, the more seasoned developers may notice this looks very similar to gherkin. Your eyes are not lying to you, this strategy uses similar words.\nFourth, I’m sure people much smarter than I have already coined these strategies. I, and those around me, can’t be the only ones who think about writing tests this way. If you know of a better source, or you’ve seen this before, please let me know in the comments.\n Define Naming is hard because there are so many options. Tests are hard because people rarely talk about strategy, guidelines, or even where to start. Sure, there is information out there, but I’ve found it difficult for beginners to understand and actually put it to work. Frequently they get scared off by the foreign-looking syntax and if that doesn’t scare them off, they get stuck on what to write for describe or test blocks.\nI have found success by breaking tests up into sentences first. Before we write a single line of code, we first write down what we want to cover. We should concentrate on the logical branches and not get bogged down with code. At least, not just yet.\n Each group of tests should have three sections: topic, state(s), and expected result(s).\nTopic: The thing we are testing. This could be a function, a class method, a React component, etc\nStates: These are the variations a Topic might expect to handle. There will be any number of these and there may be extensions of States, too.\nExpected Result: Given specific inputs, we should expect a specific result.\nPhoto by Kelly Sikkema on Unsplash\nStart With Sentences I encourage my team to start with sentences that look somewhat like pseudo-code. This is helpful for those who are not as comfortable writing tests. This exercise allows you to focus on identifying what to test before worrying about how to write any code to do the test.\nLet’s see what this structure looks like.\ntopic- when (a specific state) - should (the expected result)  For more complex states, we extend this a bit to look like this\ntopic- when (a specific state) - and (and extension to this state) - should (the expected result) - and (and extension to this state) - should (the expected result)  There are some keywords here that we haven’t talked about yet. These words are important and should always be used to start each sentence.\nWhen: This is the first variation of a State.\nexample: “when passed a negative number”, “when prop is undefined”, “when the moon is full”, etc.\nAnd: This is an extension of the parent State. An additional concern or logical branch that might occur in State.\nexample: “and #currentSearchTerm is an empty string”, “and #currentSearchTerm includes #name”, etc\nShould: The expectation. What do we expect to happen here? This sentence will probably look similar to your final assertion.\nexample: “should not throw”, or “should return and instance of Foo”, “should return an error”, etc.\nSentences for each of these should be short and unique. If you find your test descriptions going past 120 characters, they are too long.\nIn my opinion, you really don’t need much more in terms of structure. I’d encourage you to nest when and and no deeper than 3–4 levels. With this you have readability, context, and simplicity. Its easy to maintain and there are built-in expectations for everyone as they write tests. This leads to sameness, which then leads to maintainability. 🎉\n Photo by AltumCode on Unsplash\nWrite Some Tests Now that we’ve gone over the theory, let’s put it to work! Look at the small function below. We will use this function as a Topic in some tests so we can see how this all might work in real life.\nA simple max function. Yes, there is a javascript built-in that does this already. For demonstration purposes only.\nHere we have a simple function called max that takes in two values, compares them, and returns the maximum of the two. There is some logic in this function that we need to test. Using sentences and not code, let’s begin.\n First think about some of the possible logical branches here and then use the words we talked about above to explain them. Starting is frequently the hardest part, so let’s start small. We won’t even care about the expectations here, only some of the states.\nWhat are some of the logical branches we should care about here? This doesn’t need to be perfect, or even complete, we just need somewhere to start.\nmax- when `valueOne` is equal to `valueTwo`- when `valueOne` is less than `valueTwo`- when `valueOne` is greater than `valueTwo`  That seems a little too easy right? Let us continue by adding some of the expectations that go along with these states.\nmax- when `valueOne` is equal to `valueTwo` - should return `valueOne` - when `valueOne` is less than `valueTwo` - should return `valueTwo` - when `valueOne` is greater than `valueTwo` - should return `valueOne`  There you have it! We have some sentences that we can translate to code. These sentences read like english and not pseudo code. Go ahead, read one of those blocks to yourself right now.\nReads nice doesn’t it 😉\nAre there any conditions here I missed? (Hint: yes). Can you find them and write your own sentence(s)?\nTranslate Sentences To Tests Using the sentences we already wrote we can now translate those into something that looks like a real test file:\nBelieve it or not, this is just enough code to run! Jest will output different colors for test.todo() blocks, so this is actually valid code! Personally, I like to scaffold out my tests this way.\nUsing todo doesn’t give us much other than a list of todos, though, so let’s fill these in with some real tests:\nYou can see, there isn’t much code required to make these tests test things. We’ve already done the hard part by writing sentences to determine most of what we wrote here in code. Doing that part first, makes writing the test pretty simple.\nThere are a few other things I’ll call out here as personal preferences, your mileage may vary:\n use a variable named result to store the output of the item under test when it makes sense, use a variable named expectedResult to store, you guessed it, the expected result  Doing this makes your tests read really well_:_\nexpect(result).toEqual(expectedResult)  This has the added benefits of A) having a reliable place to change an expectation if the code changes in the future, and B) keeps the assertion super clean.\nWhat we have is a pretty good start! These tests read well and give you some decent test coverage. However, there is some room for improvement. In the interest of making our tests read well, instead of using magic numbers we should add some meaning to those numbers.\nMoving the inputs to variables gives them context. Those numbers now mean something. Giving these things names makes it easy to understand what is going on and, more importantly, what the context is. It makes it easy for anyone to look at these tests and understand what is happening.\nConclusion There you have it! Write tests with sentences first, then move them into code. It makes the process predictable, less scary, and easy to teach.\ntopic -\u0026gt; when -\u0026gt; should  Every time I write tests I start this way. I flesh out the logical branches, then the expectation blocks, then start filling in the test code. I do this same exercise when scoping out new work for my team, too, and in some new cases, have included these sentences in the actual tickets. I’m anxious to see how that plays out, stay tuned!\n References  https://martinfowler.com/bliki/TwoHardThings.html https://en.wikipedia.org/wiki/Test-driven_development https://cucumber.io/docs/gherkin/reference/ https://jestjs.io/ https://jestjs.io/docs/api#testtodoname  ","permalink":"http://localhost:1313/posts/write-tests-with-sentences-first-code-second/","summary":"Photo by Ben White on Unsplash\nProblem In software, naming is often said to be one of the hardest parts. From what I’ve seen, writing tests is right up there too! I see people struggle with tests all the time. They get overwhelmed or frustrated and just skip it, which is a bad thing for everybody.\nNaming is hard because developers are rarely given a guide to naming. Over time, they learn tips and tricks and develop strategies to make naming easier.","title":"Write Tests With Sentences First, Code Second"},{"content":"Recently, at Parallax, my team and I released a sweeping update to our user interface. We updated buttons, inputs, selects, dialogs, and many other visual elements. What follows is an explanation of one small part of that effort.\n Problem In the summer of 2021, my team and I were presented with a few interesting challenges. The next set of work would entail:\n Update many of our shared components with new styles (buttons, inputs, selects, dialogs, etc) Many of these updates would affect design, but we would also take the opportunity to slim down component APIs We should plan on not being able to release everything at once. Doing so would mean a massive change and a risky release We should be able to switch between old and new component variations without code changes  Let’s dig into this a little bit.\nUpdating designs isn’t anything new. This happens all the time and it’s something we plan for. Doing so much of it all at once was new and was a sizable task.\nDoing so much change all at once, while also continuing to maintain the current components, added an additional layer of complexity. It was necessary otherwise we would miss the window we had to make these changes, with new feature work coming in hot shortly after this would finish. This much change would incur a significant amount of tech debt. It adds to the effort both before and after release. We were okay with this, but isn’t something to discount.\nPhoto by Marek Piwnicki on Unsplash\nIdeation Going into this project we knew we would need some sort of Feature Flag. We already use Launch Darkly elsewhere within the UI (and BE) so that part was already in place.\nWith a Feature Flag solution already in place, the next major challenge was to figure out a way to keep the current components in place while also updating each implementation to use new variations on demand. This made things interesting. Do we update in place, or do we spin up new versions next to the old ones? Both strategies have pros and cons and, after much deliberation, we determined neither was really the correct path forward. We would use both!\nNow, with a general direction decided on, we needed to figure out some way to switch between an old or new component variation on demand, without having to change any code. Our UI is built on React (Next.js specifically), so this actually turned out to be a pretty short adventure.\n Solution After quite a bit of forethought, we decided to create a new component called UiExperiment(we prefix our shared components with Ui so they are easy to pick out). This component would accept an “old” component and a “new” component (ReactNode) as props, and also a prop to determine which one should render which would be driven by a feature flag.\nUiExperiment React component, with Typescript\nNote: ExperimentName and Experiment live next to this component only for easy demonstration. In real life, these live in a *.constants.ts and *.types.ts file next to the component file.\nBy design, this is a pretty simple component. If isExperimentActive is passed as false, render what was passed as props.a. If it is passed as true, render props.b. In real life, the value of isExperimentActive comes from a feature flag. You might see, though, how this might be super powerful beyond what we’ve done here. Perhaps leveraging a component like this for true experiments, or using this for access control, etc.\nUsing UiExperiment in the app is now quite simple. In places where we will switch out old for new, we add UiExperiment around the current component, then add in the new one right next to it. We can do all that work now, continue to push to production, and “flip the switch” only when we are ready to release these updates to our users.\nExample usage of UiExperiment component\n Wait a minute, let’s take a look at those props again.\nUiExperiment props and supporting types\nWhy would we set up the props this way? Well, we are doing a little future work here. We built this component to solve a single problem for today, but we realized early on that this could be used for some other cool things too. What if we wanted to do experiments on variations of more than 2 components? Or serve up a different experience based on some flag?\nThe original api of UiExperiment did not use the prop isExperimentActive, which is just a simple flag. Instead, we passed ExperimentName as a prop named activeExperiment. This meant we could have had n number of experiments and it would be strongly typed!\nI’ll say, though, the reason we went with a simple toggle here is because, in practice, this actually turned out to be more work than we’d planned. Instead of passing a flag, the implementing component had to do a bit of logic first to pass the correct enum, which was not ideal. It ended up being too clunky and led to code that was harder to read.\nIn the future we may bring back that prop, but for this project it just didn’t make sense.\nPhoto by Dmitry Ratushny on Unsplash\nLearnings Existing Component APIs Some readers may be wondering why we didn’t put this logical switch inside of each existing UI component?\nWhat if we used a flag on existing components?\nWe certainly could have done that, and in some cases we did. For the most part, though, we wanted to have something portable that would be easy to repeat throughout the app. In the cases where we used a flag on a component, it was usually because we were only switching styles and nothing more. In those cases, it made sense to put the flag on the component.\nAnother part of this is because most of the time the work wasn’t just updating designs, it was also updating component apis. In many cases it made more sense to spin up completely new and simple components and then leverage UiExperiment to switch between old and new versions.\nCleanup This effort required planning to do the work before release, but also work post-release. Using UiExperiment would incur tech-debt and we planned to remove that ASAP after release.\nOne benefit of UiExperiment was that the new component versions would already be in place. Once we were ready to clean up and remove all the old code, we removed things around the new implementations. It would be purely subtractive, which makes this a little easier. We could easily remove the wrapping UiExperiment and delete the old components and we were done. Typescript would guide us on the isV1 flags, by removing the prop from a component and addressing any TS errors that popped up as a result.\nNaming We still aren’t happy with the prop names a and b. My team and I take naming very seriously and these two names still feel like… Well, these could have been better.\n Conclusion This component turned out to be a lifesaver for us! It allowed us to work on all the UI updates while still pushing features to production. Because we planned ahead to use feature flags, we could take this one step further via Launch Darkly and target flags states to specific users. This meant we could beta test all the design updates behind the scenes in production before we rolled this out to all of our users!\nIn the end, this component did everything we needed and more, and continues to live on in our app. The tech debt we incurred by using this in, literally, hundreds of places, turned out to be less than we thought too. After we released these updates, we were able to remove all of the UiExperiments related to this work. We’d planned for about two whole weeks but turned out we didn’t need it, it only took a week!! 🎉\nIf you want to tinker with UiExperiment yourself, I have put together a simple CodeSandbox for my readers.\nHave you done anything like this before? Is there a better way? I’d love to hear about it, let me know in the comments!\n References  https://martinfowler.com/articles/feature-toggles.html https://launchdarkly.com/ https://reactjs.org/ https://nextjs.org/ https://medium.com/counterarts/tinker-with-purpose-9fb4f5a52459 https://codesandbox.io/s/ui-experiment-example-eoj94  ","permalink":"http://localhost:1313/posts/use-react-and-feature-flags-to-roll-out-new-ui-components/","summary":"Recently, at Parallax, my team and I released a sweeping update to our user interface. We updated buttons, inputs, selects, dialogs, and many other visual elements. What follows is an explanation of one small part of that effort.\n Problem In the summer of 2021, my team and I were presented with a few interesting challenges. The next set of work would entail:\n Update many of our shared components with new styles (buttons, inputs, selects, dialogs, etc) Many of these updates would affect design, but we would also take the opportunity to slim down component APIs We should plan on not being able to release everything at once.","title":"Use React and Feature Flags To Roll Out New UI Components"},{"content":"Photo by Sigmund on Unsplash\nThe word _Tinker _is defined as:\n To repair, adjust, or work with something in an unskilled or experimental manner\n Early in my career as a Software Engineer, I had a conversation with one of my first mentors that went something like this:\n Mentor: “You’re a tinkerer, you know”\n  Me: “Why yes, I suppose I am”\n  Mentor: “Tinkering can be bad, unless you’re tinkering with purpose. If you tinker with purpose, that can be a very powerful thing”\n My takeaway from this is that I should be deliberate in my tinkering, and not just tinker to tinker.\nHistorical Context Like may Front-End developers, I am self taught. I’ve been playing with web technologies since the late 1990s. I can remember a time before CSS and JavaScript were even a thing. I can also remember learning to build websites by just looking at their source.\nI learned by playing. Trying things and then failing, a lot! Most of the time I pushed through enough to get something working, but shortly after that I’d move on to the next thing. When I was younger I did this a lot. Over time each of these small accomplishments built on each other to form the foundations of what I know today.\nMany engineers I have come in contact with have taken a similar path.\nPhoto by Jeff Nissen on Unsplash\nWeird Gaps One problem with this strategy of tinkering, is that it is rarely focused. I’d move from technology to technology and solve the problem of the day, but rarely took the time to zoom out and understand why or go any deeper than I needed to solve a problem. This is specifically what my mentor was getting at. This strategy resulted in, as another mentor called it: Weird Gaps. I had weird gaps in my knowledge.\nI could spin up an entire Front-End build system with Gulp, but couldn’t tell you what a Stream was. I could put together a complex UI layout, but couldn’t tell you why I used float.\n Purpose I’ve learned over the years that my brain retains the most information and works best when tinkering. I still tinker but I approach tinkering a bit differently today.\nInstead of picking up a new library, tool, or language just for fun, I try to have a goal in mind. A Definition Of Done, if you will. When trying something new what am I trying to accomplish? How will I know if succeeded? What am I trying to learn? Here are some of my tinkerings:\n Deploy a NextJs app to Azure using Azure DevOps pipelines, Docker, and Terraform Get current crypto quotes from a crypto exchange Generate detailed charts from chess.com game stats Publish an npm package for a cli tool  Approaching tinkering this way, with a goal in mind, has allowed me to use my time more effectively while also continuing to enjoy messing around with new and unfamiliar things. This still leaves room for happy accidents and “just figuring it out”, but also requires a little more study. If I know I want to do X, what are the things I need to do to get there?\nPhoto by Marten Newhall on Unsplash\nConclusion Instead of aimlessly tinkering to tinker, doing so with a goal in mind has helped me grow faster as a Software Engineer.\nDo you tinker? Do you have tinkering strategies?\n References:  https://gulpjs.com/ https://nodejs.org/api/stream.html https://developer.mozilla.org/en-US/docs/Web/CSS/float  ","permalink":"http://localhost:1313/posts/tinker-with-purpose/","summary":"Photo by Sigmund on Unsplash\nThe word _Tinker _is defined as:\n To repair, adjust, or work with something in an unskilled or experimental manner\n Early in my career as a Software Engineer, I had a conversation with one of my first mentors that went something like this:\n Mentor: “You’re a tinkerer, you know”\n  Me: “Why yes, I suppose I am”\n  Mentor: “Tinkering can be bad, unless you’re tinkering with purpose.","title":"Tinker With Purpose"},{"content":"The finished build: 65% Lucky Jade mechanical keyboard.\nIntroduction I wanted to share with you today my latest mechanical keyboard build.\nIt’s been a little over two years since my last build, and this makes my 3rd full build. I am by no means an expert, but I have been lurking around the hobby for a number of years.\nI’ll mention straight away that this build could have gone better. Some things went well; however, there were some rookie mistakes I made early on in the build that would have made for a much softer landing in the end. Overall, the build did produce a nice looking keyboard that I look forward to using for the next little while. Who knows, maybe it’ll be my next daily driver?\n Parts of a Mechanical Keyboard Before we begin, lets review the major parts of a mechanical keyboard:\nSwitch\nThese are the things underneath each keycap. Their job is to complete an electrical circuit which then translates into a keypress. Think of switches as something like a light switch.\nThere are 3 major types of switches, Linear, Tactile, and Clicky.\nThere are hundreds of different switches out there to choose from, but all of them will fall into one of the three main categories.\n—\nRead more:\nhttps://aziocorp.com/blogs/blog/get-to-know-your-keyboard-the-3-types-of-mechanical-switches\nhttps://dygma.com/blogs/stories/the-ultimate-guide-to-mechanical-keyboard-switches-for-2020\nStabilizer\nSome keys are bigger than others. Keys like the Spacebar, Shift, or Backspace keys on a standard keyboard. These wider keys need supports, or stabilizers, on the left and right side of the switch otherwise the key will wobble when pressed. Or, a press to one side of the key may not translate into a complete keypress.\nKeycap\nThese are the things with the letters and are typically sold as a set and usually revolve around a theme. This theme can literally be anything.\nPCB\nPCB stands for Printed Circuit Board. This what the switches connect to, either via solder or hot-swappable connectors. Hot-swap connections, as the name suggests, is a non-permanent connection and allows for easily changing out switches.\nA PCB is not necessary for a build, it is possible to hand-wire a keyboard if one were so inclined.\nRead More:\n https://www.crackedthecode.co/a-complete-guide-to-building-a-hand-wired-keyboard/ https://matt3o.com/hand-wiring-a-custom-keyboard/  Case\nIt is typically made out of some sort of metal or polycarbonate and is the container for all the keyboard parts and should be sturdy enough to keep everything firmly together while the user types away. These come in all shapes and sizes and are sometimes described by percentages. 100% is equivalent to full size keyboard with 10 key.\nRead more :\n https://www.reddit.com/r/MechanicalKeyboards/comments/n1sq5k/keyboard_size_guide/   Sourcing Parts I’ve been slowly collecting the parts for this build for the last 16 months, since around February 2020. I tend to build Keyboards based on the keycaps, so when the Lucky Jade group buy popped up, this keyboard was born.\nAliaz Silent Tactile (60g) and Kailh Burnt Orange switches, Lucky Jade keycaps, Tada68 65% PCB and Silver, Aluminum case. Pictured with plate mount stabilizers\nOther than the keycaps, this is a pretty straightforward build. We will be building on a 65% PCB. I have a few 65% keyboards already, but they just never fit well with me. I love the idea of a 65% keyboard. I’m anxious to see if this is the one.\nWe’ll be using silent tactile switches. This means you can feel a little bump just after you press down, but there isn’t a super loud clicky noise after the press.\nList of Parts:\n Lucky Jade Keycaps Tada68 65% Case Tada68 PCB Aliaz Silent Tactile Switch / 60g Novelkeys x Kailh Box Heavy Switches, Burnt Orange  You’ll notice I have two different sets of switches listed. I like to use a different switch for the outside keys. It gives a slightly different feel for those keys. I don’t know, maybe its a little weird, but I like it so 🤷‍♂.\n Keyboard Build Preparation The very first thing I do before a build is probably the most obvious: make sure I have all the parts! There are quite a few parts that make up a mechanical keyboard, and frequently come from multiple sources. So, before you build, make sure everything is accounted for!\nNote: I’ve recently started using a spreadsheet to help with this. It’s made planning and tracking parts for future builds a breeze!\nTesting PCB\nNow that we have everything, the next most important step is to test the PCB. There isn’t much sense continuing if the PCB is fried or unusable.\nTo test the PCB, I use a wonderful tool from the folks at QMK called the QMK Configurator. Wait, how do we test the PCB without keycaps…\nA tweezer!\nTesting PCB contacts with a tweezer and the QMK Configurator\nWhat is actually happening here is the same thing that happens when you press down on a keycap. The electrical circuit is completed, its like flipping a light switch on or off.\nUsing a tweezer and the configurator we can easily see if all the switches are working. With this particular PCB, they were not. There was one set of contacts that would not respond. Upon further inspection, it looked like two sets of contacts were running into each other. Thankfully, this was what would normally be the right hand Alt key. I rarely use this key, so I decided to continue with the build.\nAssembly — Stabilizers Clip and Grease\nLarge keys need stabilizers. In order to make those larger keys work smoothly, respond (or recoil) quickly, and not make too much noise, there are a few things we must do:\nClip, Lube and Bandaid the stabilizers.\nClip. Lube and Bandaid stabilizers\nI should mention, these are plate mounted stabilizers. Quite cheap ones at that. When I started this phase of the project I muttered to myself\n “I’m going to regret using these”\n And, as it turns out, I was right. I did.\nAssembly — Switches, Pt. 1 This is where we start putting all the parts together. I still like to take my time at this phase, making very sure things are positioned correctly and everything is fitting together well.\nHere is the method to the placement of first few switches:\n All the keys that need stabilizers Each corner One along the top row  Snapping the first few switches in the switch plate just before soldering to the PCB\nThe goal here isn’t to place all the switches at once. Instead, we want to get enough switches in place for the switch plate to be well secured. Once things are soldered its much more difficult to undo things.\nIts good to start placing some keycaps at this phase, too, and testing things. Do the keys press? Do they recoil? Are they snappy? I wish I would have done this a little more thoroughly on this build…\nAssembly — Switches, Pt. 2 Whew, we’re in the home stretch. Almost all the hard work is behind us, now it’s just a matter of placing the remaining switches and soldering them all up. This can take a little bit of time, depending on how comfortable you are with soldering. Still, its important to go slow and periodically check your work. Don’t over-solder, you want a good connection but not so much solder that you can’t see the switch stem any more or so much that it covers a neighboring contact. Conversely, don’t under-solder. You want the contact to be covered with just a little bit of the switch stem poking out of the top.\nAim for perfection here but good is all we need.\nPlacing switches before soldering them to a PCB\nSoldering mechanical keyboard switches to a PCB\nUnderside of the PCB after all the switches have been soldered\nFinal Assembly Now we place the keycaps!\nAdding keycaps to switches that have been soldered to the PCB\nDepending on the keycaps, this can take almost as much time as soldering. At least for me, I tend to agonize over which keycap to use for each system key. Keep in mind, also, that these might change once we finalize the keymap.\nSecure the PCB After the switches have been soldered and the keycaps secured (or at least selected), it’s time to secure the PCB to the case. For this build, there were six tiny screws that needed to be fastened.\nThis is a little more delicate that it first seems. The screws are small and there is this lovely gap between the PCB and the switch plate. Its very easy to get a screw off vertical and suddenly stuck between the PCB and switch plate.\nFastening the PCB to the case via mounting screws\nWhoops, I Made a Mistake! It wasn’t until this phase of the project that I realized I made a boo-boo. I put dielectric grease around the inside of two of the stabilizer housings. Admittedly, this was a rookie mistake. Putting grease here had the opposite effect; it made the stabilizers stick. This means that two keys would not recoil after being pressed.\nThankfully, this is a solvable problem. It did require an extra amount of work though and was more than a little a pain in the a**.\nHere are the steps for getting this bug resolved:\n Pull out around 10 keycaps to get to each mounting screw Un-mount PCB from case De-solder the two switches with affected stabilizers Remove sticky stabilizers Clean grease out of sticky stabilizers. Re-attach stabilizers Re-solder removed switches Test fix (it worked!) Re-attach PCB to case Place removed keycaps back on their switches  Detached PCB and switch plate with offending stabilizers removed, and corresponding switches de-soldered\nFlashing With everything back together and working, now we type! I’m a fan of a website called Monkeytype for this because its fast, clean, and easy to use. What we are looking for here is feel and function: Does it feel correct? Does it feel nice to type on? Does it work the way our hands expect? This is also where I start making mental notes about the keymap and what I might change.\nChanging the keymap for this keyboard is going to be done with the help of, again, the good people at QMK. We’ll be using the QMK Configurator for this, too.\nOut of the box, the Tada68 comes with a pretty standard 2-layer 65% keymap.\nI’m a little bit particular with my keymaps, so I tend to tinker with them a little bit. In the end, I ended up flashing this board 5 or 6 times until I was able to get things just the way I like it.\nHere is what I ended up with:\nFinished Lucky Jade + Tada68 mechanical keyboard keymap\nCompleted Lucky Jade Build This was a fun build and was a long time coming, too. Some of the parts for this build were purchased 16 months ago, way back in February of 2020 (like, a lifetime ago!).\nOverall the build went fairly well. There were some bumps along the way, sure, but we made it through and ended the day with a pretty great feeling (and looking) mechanical keyboard.\n References\n https://aziocorp.com/blogs/blog/get-to-know-your-keyboard-the-3-types-of-mechanical-switches https://dygma.com/blogs/stories/the-ultimate-guide-to-mechanical-keyboard-switches-for-2020 https://www.crackedthecode.co/a-complete-guide-to-building-a-hand-wired-keyboard/ https://matt3o.com/hand-wiring-a-custom-keyboard/ https://www.reddit.com/r/MechanicalKeyboards/comments/n1sq5k/keyboard_size_guide/ https://config.qmk.fm/#/test https://www.youtube.com/watch?v=cD5Zj-ZgMLA https://monkeytype.com/ https://config.qmk.fm/#/tada68/LAYOUT_65_ansi  Parts\n https://cannonkeys.com/products/gb-kat-lucky-jade https://kbdfans.com/products/kbdfans-tada68-aluminum-case https://kbdfans.com/collections/aliaz-switches/products/pre-orderaliaz-silent-switch-tactile https://kbdfans.com/products/novelkeys-x-kailh-box-heavy-switches-10pcs?variant=2467740909581  ","permalink":"http://localhost:1313/posts/i-built-a-mechanical-keyboard/","summary":"The finished build: 65% Lucky Jade mechanical keyboard.\nIntroduction I wanted to share with you today my latest mechanical keyboard build.\nIt’s been a little over two years since my last build, and this makes my 3rd full build. I am by no means an expert, but I have been lurking around the hobby for a number of years.\nI’ll mention straight away that this build could have gone better. Some things went well; however, there were some rookie mistakes I made early on in the build that would have made for a much softer landing in the end.","title":"I Built A Mechanical Keyboard"},{"content":"Leading software projects can be a challenging endeavor. I’ve been leading software projects big and small for the last 5 years. What follows are some lessons I’ve learned through hardship, from peers, and from mentors along the way.\nPhoto by Andres Garcia on Unsplash\n  Stress comes from the unknown, an unclear path forward, or both.\n Things are rarely as bad as they seem. Work towards a plan, and two or three backup plans. Once you have a plan(s) things won’t seem so scary and you won’t be nearly as stressed.\n  The project lead owns the plan and works to make sure the team executes it.\n Photo by Halacious on Unsplash\nThis may seem obvious, but sometimes it’s worth re-iterating. The lead owns the plan. That doesn’t necessarily mean the lead creates the plan. It’s up to you to facilitate but it may not always come from you. Sometimes the best plans come from the group. Sometimes the group doesn’t have all the information to make a great plan. Sometimes it will come from you, sometimes it won’t.\n  If you have a plan, ideally with options, you will be able to react quickly to keep things on track\n When it’s crunch time, 100 things come at you at once. Some you will expect some you will not. Having a plan, even if it’s only a mental model, will allow you to adapt and continue moving forward.\nPhoto by Eugenio Mazzone on Unsplash\n  Sometimes the path forward is to ask for more time\n Photo by Ken Lawrence on Unsplash\nIt’s rarely an easy discussion and frequently the last option. Occasionally, though, this is one discussion that needs to happen. The earlier the better.\n  Frequent communication between stakeholders, development, and anyone else who cares, makes difficult discussions easier later on\n Photo by Jason Rosewell on Unsplash\nNobody likes surprises. If things aren’t going well, say so and say so early. If product owner(s) and/or project manager(s) already knows the team is facing unforeseen challenges and working 80 hour weeks, they won’t be as surprised when you ask for more time.\n","permalink":"http://localhost:1313/posts/lead-lessons-part-1/","summary":"Leading software projects can be a challenging endeavor. I’ve been leading software projects big and small for the last 5 years. What follows are some lessons I’ve learned through hardship, from peers, and from mentors along the way.\nPhoto by Andres Garcia on Unsplash\n  Stress comes from the unknown, an unclear path forward, or both.\n Things are rarely as bad as they seem. Work towards a plan, and two or three backup plans.","title":"Lead Lessons, Part 1"}]